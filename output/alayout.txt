{
  "1 INTRODUCTION": {
    "content": [
      [
        67.15193380405934,
        1048.487096673548,
        780.5376079110271,
        1370.8414865271716,
        "text",
        "A behavior of driver-vehicle-units(DVUs\uff09[1]. Large GENT-BASED road traffic simulation considers the scale agent-based simulation of road traffic (e.g., the whole city) is a useful tool to evaluate the impact of individual behaviors on road traffic as a whole [2]. It is useful in solv- ing the severe problems that modern large cities face, such as congestion and high emissions. However\uff0cSuch traffic simulation usually involves thousands or millions of agents which is computationally intensive. Parallel computing techniques can be used to speed-up the simulation\n"
      ],
      [
        68.31343845581772,
        1364.6249278147998,
        780.9969766070043,
        1622.7033853572148,
        "text",
        "To parallelize an agent-based traffic simulation, a common way is to decompose the road network into multiple spatial subregions \uff08i.e., partitions). Each subregion is executed by a Logical Process (LP) which is assigned to a physical proc- essing unit. To maintain the correctness of the simulation Synchronization of LPs is required for simulation time advancement due to data dependencies between LPs [3] In a distributed memory environment, synchronization is"
      ],
      [
        69.55582779149725,
        1660.2410063644265,
        676.505915812287,
        1818.8374469488153,
        "text",
        "Y.Xu is with AIDA, TUIMCREATE Ltd., Singapore 138602 E-mail: axuya0006@e.ntu.edu.s\nV. Viswanathan is wvith RP5, TUIMCREATE Ltd., Singapore 1 E-mai: vaisagh.vistvanathan@tum-create.edu.sg\nW. Cai is with the School of Computer Engineering, Nanyang cal Lniversity, Singapore 639798. E-mail: asuvtcai@ntu.edu.sg"
      ],
      [
        69.08867727325514,
        1661.855775466344,
        775.2281311213671,
        1819.0381287074586,
        "list",
        "Y. Xu is with AIDA, TUIMCREATE Ltd., Singapore 138602.\nE-mail: xuya0006@e.ntu.edu.sg\nV.Viszvanathan is vith RP5, TLIMCREATE Ltd., Singapore 138602 E-mail: vaisagh.visvanathan@tum-create.edu.s\nW. Cai is with the School of Computer Engineering, Nanyang Technologi cal Lniversity, Singapore 639798. E-mail: asvtcai@ntu.edu.sS\n"
      ],
      [
        68.1575903607045,
        1826.674821363324,
        780.4352284656696,
        1907.2925078764356,
        "text",
        "Manuscript received 25 Sept. 2016; revised 16 Apr. 2017; accepted 26 May 2017. Date of publication 9 June 2017; date of current version 11 Oct. 2017. (Corresponding author: Yadong Xu.\n"
      ],
      [
        68.51121290264031,
        1900.6669048302822,
        481.37305556345996,
        1929.8837502486633,
        "text",
        "Recornended for acceptance by C. Carothers"
      ],
      [
        67.67236593268582,
        1928.4726044946854,
        779.5697283853011,
        2001.7252050969355,
        "text",
        "For information On obtaining reprints of this article, please send e-miail to: reprints@ieee.org, and reference the Digital Object Identifier beloz.\nDigital Object Identifier no.10.1109/TPDS.2017.2714165\n"
      ],
      [
        798.4380543598554,
        1047.2386371498055,
        1511.5058206006333,
        1655.7830277862251,
        "text",
        "typically achieved by message-passing. For agent-based traf fic simulation, global barriers are commonly used [4], [5\u300d Agent models are updated with fixed intervals and global barriers are deployed at the end of update intervals. The limi- tation of this synchronization method is that all LPs have to wait at global barriers despite some LPs having no depen dencies with other LPs. Another approach for synchroniza tion is to allow LPs to exchange messages and progress asynchronously [6], [7]. LPs do not need to synchronize at the same time. The frequencies of synchronization can be differ ent for different LP pairs and is determined by a measure termed lookahead. L0okahead of $L P_{i}$ towards $L P_{j}\\ (i\\not\\equiv j)$ at simulation time t is a time interval in the simulated future within which ${\\mathbf{}}L P_{i}$  will not have data dependencies with $L P_{j}.$ The larger lookahead values are, the less frequent synchroni zation is performed. However, due tothe frequent interaction of agents, agent-based simulations generally have small look ahead. High synchronization overhead is still an issue for the performance of parallel agent-based traffic simulations\n"
      ],
      [
        798.6901440556934,
        1649.9778013104212,
        1511.1180387629868,
        2005.8622235986097,
        "text",
        "Computation replication is an effective approach reported in the literature to reduce inter-process communication in parallel applications [8], [9],[10], [11], [12]. The concept is to let LPs conduct some redundant computation to generate data locally instead of receiving them from synchronization. There is a trade-off between the benefit of reduced synchro nization and the overhead of redundant computation: to fur ther reduce synchronization operations,more redundant computation is usually required. This method has been used for solving partial differential equations and matrix multipli- cation [8], [9], as well as agent-based simulations [10], [11]"
      ],
      [
        68.13934909991148,
        129.26316747022284,
        773.6667658262456,
        762.6561332065007,
        "text",
        "Reducing Synchroni Computation Rer Agent-Based Roa Yadong XU $\\stackrel{\\lbrack\\Theta]}{\\Theta}_{;}$ , Member, IEEE, Vaisagh Viswanathi Abstract-Road traffic simulation is a useful tool for studying roac agent-based road traffic simulation is computationally intensive, w deals with the Synchronization problem in parallel agent-based ro We aim to reduce synchronization operations by introducing some between the benefit of reduced synchronization operations and th the total overhead of redundant computation and synchronization proposed a way to define extended layers of partitions in the road behavior of agents and the topology of road networks. Second, du adjust the amount of redundant computation according to traffic cq"
      ],
      [
        68.12704880020242,
        766.2648095862744,
        774.1745678752189,
        1143.6526581828393,
        "text",
        "network and trip data. Results have shown that the method can re of the parallel simulation significantly\nlndex Terms-Agent-based traffic simulation, parallel simulation 1 lNTRODUCTION\nA behavior of driver-vehicle-units\uff08DVUs\uff09[1]. Large- GENT-BASED road traffic simulation considers the scale agent-based simulation of road traffic (e.g., the whole"
      ],
      [
        68.00767830458653,
        1148.106469509538,
        775.1935583702042,
        1492.6017934406484,
        "text",
        "city\uff09is a useful tool to evaluate the impact of individua behaviors on road traffic as a whole [2]. It is useful in solv- ing the severe problems that modern large cities face, such as congestion and high emissions. However\uff0c such traffic simulation usually involves thousands or millions of agents which is computationally intensive. Parallel computing techniques can be used to speed-up the simulation.\nTo parallelize an agent-based traffic simulation, a common way is to decompose the road network into multiple spatial subregions \uff08i.e., partitions). Each subregion is executed by a Logical Process(LP) which is assigned to a physical proc"
      ]
    ]
  },
  "2 PARALLEL AGENT-BASED SIMULATION OF ROAD": {
    "2.1 Simulation Space and Agents": {
      "content": [
        [
          67.78034671500568,
          1682.7185072838727,
          774.9664335083495,
          1869.0464541137524,
          "text",
          "The simulation space of an agent-based traffic simulation is a road network. It is a spatial netzwork that consists of links and nodes. Links represent real-world roads and can have one or more lanes. Links have speed limits. Nodes contain the connectivity information of links. The traffic flow on a link is unidirectional from the starf 10de to the end 10de"
        ]
      ],
      "2.1.2 Agents": {
        "content": [
          [
            69.11857896222374,
            1942.977091048748,
            774.2402482270867,
            2066.80803169422,
            "text",
            "Agents are situated on roads (i.e., links) of the network. An agent in the simulation represents a DVU. The behavior of DVUs is often characterized by acceleration models and lane-changing models [1], [4], [13]. The models describe the"
          ],
          [
            808.1046428370919,
            126.97957492981368,
            1494.8800287019299,
            399.6971478058452,
            "figure",
            "nodezi B icO $I/\\eta K_{2}$  ${}^{i}\\!{\\cal I}O d{\\bf d}{\\bf_{j}}^{3}$ A sensing sensing range of agent ${\\boldsymbol{B}}$ \u5bb6 back $t r o m t$  $\\frac{\\vec{D}}{=}$ sensing\n\u5b66 ${}^{I d W G\\gamma_{b}}.$ range y $\\bigcup{}$ node Inodea"
          ],
          [
            799.0322489100265,
            421.03752018532396,
            1505.63916336797,
            496.15590550942346,
            "text",
            "Fig. 1.Agent ${\\boldsymbol{B}}$ with front sensing range $\\gamma_{f}$ and back sensing range $\\gamma_{b}$ i a road network. Agent ${\\boldsymbol{C}}$ is in the sensing range of agent ${\\boldsymbol{B}},$ thus, agent ${\\boldsymbol{B}}$ subscribes to agent-based state variables of agent ${\\cal{C}}.$ \n"
          ],
          [
            798.4445908936744,
            532.1281107462407,
            1504.3567426847378,
            845.9135692695843,
            "text",
            "moVement Of LVUS On rOads\uff0cSuch aS what acceleratiOn 8 DVU should have and which lane to take. The models require agents to have sensing ranges, which are the areas in the road network within which other agents may affect the agent's behavior. An agent needs to examine the traffi condition within its sensing range to make acceleration and lane-changing decisions. This is challenging in parallel traf fic simulation when the sensing range is reaching into other partitions as it then potentially requires synchronization between the responsible LPs\n"
          ]
        ]
      },
      "2.1.3 Agent State Variables": {
        "content": [
          [
            798.5543731604655,
            921.0406159399445,
            1504.726883756415,
            1489.8723254171462,
            "text",
            "An agent has a state at a certain virtual simulation time. The state contains multiple state variables. Among them, there are agent-based and component-based state variables. Agent-based state variables belong to the entire agent and are visible to other agents, such as velocity and position. Component-based state variables belong to the models in an agent, Such as a state-of-charge variable for a battery model in an electric vehi- cle. An agent subscribes to agent-based state variables of the agents in its sensing range. States of agents change as the sim ulation progresses by executing timestamped events which contain certain update functions. Agent-based state variables are updated periodically. The period is referred to as an update interzal, denoted as 8. The events that change agent-based state variables may have an effect on other LPs, thus they affect synchronisation between LPs. Other events that change component-based state variables are internal to an LP. An illustration of sensing ranges and state subscription is shown in Fig, 1.\n"
          ]
        ]
      }
    },
    "2.2 Parallelization and Data Dependencies": {
      "content": [
        [
          798.458530248927,
          1562.7144108909663,
          1506.0562414776725,
          1812.0830676601447,
          "text",
          "We denote the entire road network as ${\\mathit{G}},$ and agent popula tion at simulation time ${\\mathbf{}}t$ as $A^{t}.$  In parallel simulation, the road network is partitioned into $\\boldsymbol{\\mathit{I}}$ disjoint spatial subre gions, ${\\mathrm{G}}_{1}\\quad\\quad{\\mathrm{G}}_{1},\\ \\cdot\\cdot\\cdot,{\\mathrm{G}}_{I-1}\\}$ . The subset of $A^{\\dagger}$ that resides in partition $\\textstyle G_{i}$  $(0\\leq i\\ <I)$ at simulation time ${\\mathbf{}}t$ are denoted $A_{i}^{t}.$ !. By definition $A^{t}\\implies\\textstyle|\\partial_{i=0}^{I-1}A_{i}^{t}$ . The LP that is responsible as A\nfor executing the events from agents in partition $\\hat{\\boldsymbol{l}}$  is $L P_{i}.$ Agents in partition $\\hat{\\boldsymbol{\\imath}}$ are local to ${\\mathbf{}}L P_{i}$ \n"
        ],
        [
          798.8167795542587,
          1816.3715780105667,
          1505.9959163583312,
          2003.491792890856,
          "text",
          "During partitioning, the network is cut on links. The links that are cut and therefore evenly divided between two partitions are named boundary links. A boundary link can be incoming to or outgoing from a partition, depending on the traffic flow on the boundary link. The two partitions that share boundary links are neighboring partitions\n"
        ],
        [
          796.9375654580119,
          2005.9362535958942,
          1505.28540300755,
          2066.817346726991,
          "text",
          "There are data read and write dependenicies between neigh boring LPs. First, if there is an agent $\\textstyle A$ in $L P_{i}$ inside the"
        ],
        [
          153.6743781440803,
          125.95734200787248,
          693.1562000244567,
          391.66182894495466,
          "figure",
          "Dwever, there is a major difference between th paces in those simulations and those in agen affic simulation. The spaces in the existing wo n-dimensional grids where computational ta ited uniformly,or graphs where vertices re tational tasks and edges represent the depenc asks. The simulation space in agent-based road ion is a spatial network composed of links and"
        ],
        [
          67.23295630646463,
          411.03399209751103,
          778.995615957104,
          465.43721533376834,
          "text",
          "of agents in the spatial network may not be uniform and it G {a\n"
        ],
        [
          67.75152788555529,
          507.38182737138305,
          777.0167787851824,
          1143.1150010281679,
          "text",
          "is dynamic. The interaction of agents affects how computa tion is replicated. Thus,the existing solutions cannot be directly applied to agent-based road traffic simulation. It is non-trivial to determine how computation can be replicated in agent-based road traffic simulation. In addition, the trade off between the redundant computation and the benefit of reduced synchronization operations should be carefully studied in order to gain overall performance improvement We solve two challenges in this paper. The first challenge is to limit the amount of redundant computation. We pro- pose a way to define extended layers of partitions for agent- based road traffic simulation. The sizes of extended layers are determined by the behavior of agents and topology of road networks in our representation. The second challenge is to deal with the dynamic nature of road traffic. A method is proposed to adjust the amount of redundant computation according to traffic conditions on the road network dynami- cally during the simulation. Efficiency of the proposed methods is investigated in a parallel agent-based road traffic simulator using real-world network and trip data\n"
        ],
        [
          68.12058609771422,
          1143.9379106337447,
          775.5433023062293,
          1748.6504726579578,
          "text",
          "The remainder of the paper is organized as follows: the next section presents some background information about parallel agent-based traffic simulation used in this work agent models, partitioning of the simulation, and the synchro nization protocol. Section $3$ introduces our proposed adaptive computation replication method. Extended layers of parti- tions on the road network are defined. A heuristic that adjusts the number of extended layers to replicate is developed. Sub sequently, Section 4 presents experiments and results. Sec- tion 5 describes related works. Finally, Section 6 provides a summary of this work and recommendations for future work 2 PARALLEL AGENT-BASED SIMULATION OF ROAD TRAFFIC\n2.1 Simulation Space and Agents\n2.1.1 Simulation Space\nThe simulation space of an agent-based traffic simulation is a road network. It is a spatial netzork that consists of links"
        ]
      ]
    },
    "2.3 Mutual Appointment Synchronization Protocol": {
      "content": [
        [
          67.9942508465608,
          1812.413669612698,
          773.7871010512505,
          2003.7357813808026,
          "text",
          "Data dependencies necessitate synchronization of LPs. The synchronization protocol used in this work is the mutual appointment (MA) protocol introduced in [14]. The idea o the protocol is that an LP communicates with other LPs by making appointmenits individually with them at certain rnutually agreed simulation times\n"
        ],
        [
          67.53893302959945,
          2000.0878838104147,
          776.4547943835892,
          2067.858505916174,
          "text",
          "The progression of the simulation in $L P_{i}$ using the MA protocol is shown in Algorithm 1. For each update interval"
        ],
        [
          798.8574163187237,
          122.29248944362516,
          1506.6432694666687,
          699.3205289402706,
          "text",
          "there is a synchronization event. Associated with the syn- chronization event, there is a set of LPs that currently have appointments with $L P_{i},$ denoted as $G_{i}^{t},$  $G_{i}^{t}$ may include all \"5\nnone, or only a subset of the neighboring LPs of $L P_{i}.$ When IP\uff0c $G_{i}^{t}$ is empty, no message-passing occurs for $L P_{i}$ at time t $L P_{j}$  $C_{i}^{t},\\,L P_{i}$ sends and receives migrating For each LP; in the set\nagents, shared states and a lookahead. Lookahead is a pre dicted time period from the current time to the time when the next data dependency may happen. After messages are received, the next appointment is made according to the lookahead. An appointment is made by adding the LP to the future $C_{i}^{t+\\Delta t}$ set, where $\\Delta t$ is the minimum of the two lookahead values of L $L P_{i}$ and $L P_{j}.$ According to the defini tions of data read and write dependencies,the minimum lookahead value between any two LPs is an update interva (i.e.,\uff0c6). Lookahead decides the frequency of synchroniza- tion. In this work, the lookahead is determined by the num ber of replicated extended layers\n"
        ],
        [
          801.1633951952723,
          728.9594924226386,
          1507.5182199573778,
          794.8634309875973,
          "text",
          "Algorithm 1. Simulation Progression in $L P_{i}$ Using MA Protocol\n"
        ],
        [
          804.0716802242011,
          797.1941502398539,
          1507.2977103827616,
          1445.033026090566,
          "list",
          "1:Definitions:\n2: $T_{e n d}$ simulation ending time\n3: $G_{i}^{l}$ LPs having appointments with $L P_{i}$ at simulation time ${\\mathbf{}}t$ 4: $\\textstyle\\sqrt{{\\frac{j}{c}}}_{\\cdot}{\\frac{1}{v}}$ lookahead from $L P_{i}$ to $L P_{j}$ at simulation time ${\\mathbf{}}t$ \n5: initialize t\u21900, $G_{i}^{0}$ as all neighboring LPs of $L P_{i};$ \n6:while $t\\ <\\ T_{e n d}$ do\n// synchronization event\n7: foreach $L P_{j}\\in C_{i}^{\\prime}$ do\n8: send migrating agents, shared states, and current look 10: end ahead (i.e.,\uff0c $l_{i,j}^{t}$ to $L P_{j};$  $L P_{j};$ \n9: prepare to receive a message from\n11: wait for all message sending and receiving to finish 12: update the local agent set and proxy agent set;\n13: foreach $L P_{j}\\in C_{i}^{t}.$ do $\\Delta t=\\operatorname*{min}(l_{i,j}^{t},;l_{j,i}^{t});$ \n14: add $L P_{j}$ to $G_{i}^{t.}$ rA\uff0c where\n15: end\n// event for updating agent-based states\n16: update the states of local agents for this update interval 17: $t arrow t+\\delta;$ \n18: end\n"
        ],
        [
          802.161437280669,
          798.9269097568696,
          1510.5913358933321,
          1445.0539440588936,
          "table",
          "1\uff1a Definitions\n2: $T_{e n d}$ simulation ending time\n3: $G_{i}^{l}$ LPs having appointments with $L P_{i}$ to $L P_{j}$ at simulation time ${\\mathbf{}}t$  ${\\mathbf{}}t$  $L P_{i}$ at simulation time 4: $\\sqrt{\\frac{\\dot{f}}{\\chi_{\\ddots}\\dot{j}}}$ lookahead from $G_{i}^{0}$ 'as all neighboring LPs of $L P_{i};$ \n5: initialize $t arrow$ 0,\n6: while $t\\ <\\ T_{e n d}$ do\n/ / synchronization event\n7: foreach $L P_{j}\\in C_{i}^{\\prime}$ do\n8: send migrating agents, shared states, and current look 10: end ahead (i.e., $l_{i,j}^{t}$ to $L P_{j};$  $L P_{j};$ \n9: prepare to receive a message from\n11: wait for all message sending and receiving to finish 12: update the local agent set and proxy agent set\n13: foreach $L P_{j}\\in C_{i}^{\\prime}$ FA wher $\\Delta t=\\operatorname*{min}(l_{i,j}^{t},;l_{j,i}^{t});$ \ndo\n14: add $L P_{j}$ to $G_{i}^{t.}$ \n15: end\n// event for updating agent-based states\n16: update the states of local agents for this update interval 17: $t arrow t+\\delta;$ \n18: end\n"
        ]
      ]
    }
  },
  "2: Tend simulation ending time": {
    "content": [
      [
        798.4890865756952,
        1479.7460676870357,
        1506.6742983139538,
        1670.2548300147757,
        "text",
        "Another consideration for efficient parallel simulation is workload balance of LPs. Agents should be distributed as evenly as possible among LPs. In this work, We focus on synchronization, thus load-balancing will not be discussed. More detail regarding load-balancing in traffic simulation one can refer to[15]\n"
      ]
    ]
  },
  "3 ADAPTIVE COMPUTATION REPLICATION": {
    "content": [
      [
        798.2047079778598,
        1752.1362559738066,
        1506.1392475818316,
        2066.379867030014,
        "text",
        "The aim of this Work is to reduce synchronization so as to reduce simulation execution time. This is achieved by increasing lookahead via copying more information from neighboring LPs at each synchronization operation. Interac tions of agents are bounded by their locations on the road network; thus, We determine the extra information based on agent locations on the road network. Extended layers of par titions are defined in this section. Then an adaptive method that dynamically adjusts the number of extended layers to replicate is proposed.\n"
      ],
      [
        194.84944191973764,
        126.3588178775281,
        646.8643887650248,
        368.1477037864903,
        "figure",
        "L0qical Process Logical Process fnodezi linkz $\\scriptstyle{B=\\sin(\\mathrm{{n}})}$  $\\operatorname{tGB}:=$ \n $D u\\#e r$  $b u f t e r$ \nA region ${\\mathrm{reg}}/{\\mathrm{o}}/{\\mathrm{p}}/{\\mathrm{r}}$ \n $B_{2,l}$  $\\frac{B_{J,2}}{I_{\\cdot2}}$ \nsize=y ${\\it S l}\\bar{Z}\\sigma=\\gamma_{f}$ \nboundary cu\n"
      ],
      [
        70.7442119697507,
        389.77516711018455,
        775.2019849860912,
        444.3567241975164,
        "text",
        "Fig.2. Illustration of boundary cut and buffer regions $\\gamma_{f}$ and $\\gamma_{b}$ are front"
      ]
    ],
    "3.1 Extended Layers on the Network": {
      "content": [
        [
          67.72295516054085,
          508.1131800101197,
          775.0418005308165,
          602.8020406318193,
          "text",
          "We first explain the idea with the simplest case, i.e.,one extended layer. Then the generalized multiple layer case is described\n"
        ]
      ],
      "3.1.1 One Extended Layer": {
        "content": [
          [
            68.46635790814305,
            671.7255206091988,
            775.7993296730426,
            830.1196860740755,
            "text",
            "An extended layer of a partition is defined as the space in the road network immediately next to the boundary of the par tition that is required to calculate the agent states in an LP until the next synchronization. Buffer regions are shifted next to the extended layer\n"
          ],
          [
            67.82440433113044,
            830.0703327425524,
            774.8338915033212,
            1110.6526837972642,
            "text",
            "When Synchronization is conducted, each LP receives complete agents in its extended layer and shared states in buffer regions from neighboring LPs. Agents in the extended layer still exist in the original LPs, but they are replicated in the receiving LP. They are referred to as external agents of the receiving LP. LPs compute the states of external agents, so as to emulate the receive of a synchronization message by pro ducing migrated agent and shard states. This way, the syn chronization operation can be skipped\n"
          ],
          [
            68.7821541982725,
            1111.4060575003145,
            775.0225846964571,
            1238.6908325334477,
            "text",
            "The concepts above are illustrated in Fig. 3. The network is the same as that in Fig. 2. Partition $G_{1}$ has one extended new buffer region of inside which is marked as $X_{1.2}^{1}.$  ${B}_{1.2}^{1}$ is the layer in partition $G_{2},$ \n $G_{1}$  $G_{2}$ \n"
          ],
          [
            67.76087000994416,
            1238.855152979959,
            775.103070691192,
            1611.5642403794893,
            "text",
            "Suppose that at simulation time $t_{\\prime}$ complete agents in ${\\mathrm{X}}_{1}^{1}$ 2 are replicated to $I P_{1}$ from $L P_{2}.$ Agent-based state variables of agents in ${B}_{1.2}^{1}$ are send to $I P_{1}$ by $I P_{2}.$  $X_{1.2}^{1}$ P.. The agents in are external agents of $I P_{1}$ i. States of those agents are updated by L $L P_{1}$ P together with local agents at time t. At time $t+\\delta,$ the agents hat fall inside $X_{1,2}^{1}$ will function as proxy $X_{12}^{1}$ \u529b agents. Due to movement of agents, agents currently in may be different from those at time t. Then, states of the agents currently in $G_{1}$ can be updated till time $t+2\\delta$ LO using those agents. After that, the next synchronization operation is performed. The same procedure also applies to $L P_{2}.$ Lookahead between the two LPs is 28\n"
          ]
        ]
      },
      "3.1.2 Multiple Layers": {
        "content": [
          [
            68.22900494593009,
            1682.4075159266265,
            775.9445509786112,
            1839.4820108935517,
            "text",
            "More generally,a partition can have multiple layers of extended layers. The first layer is immediately next to the boundary of the partition, and other layers expand towards neighboring partitions. Buffer regions are shifted next to the outermost extended layer\n"
          ],
          [
            68.34032782649022,
            1841.0876283843259,
            774.9948634927911,
            2069.141365692518,
            "text",
            "Supposing that $L P_{i}$ and $L P_{j}$ use $k\\,(k\\geq1)$ extended layerS between them, the lookahead between the two LPs will be $({\\hat{k}}+1,$ \uff09\u00b78.To explain this, We denote the kth extended layer of partition $G_{i}$ in neighbor $G_{j}$ as X;,. After a synchronization operation is performed, in the $m\\mathrm{th}^{~}\\bigl(1\\leq m\\leq\\dot{k}\\bigr)$ update inter- val, $L P_{i}$ updates the states of local agents and external agents LP;1\nin the extended layers $\\left\\{X_{i,j}^{1},X_{i,j}^{2},\\cdot\\cdot\\cdot,X_{i,j}^{\\tilde{k}-}(m-1)\\,\\right\\}$ .After the"
          ],
          [
            798.2740109870249,
            128.01124545074646,
            1505.352973441486,
            352.86181672025083,
            "text",
            "mth update interval, agents in the extended layer $X_{i,j}^{k-(m-1)}$ will function as proxy agents. In the $({\\hat{k}}+1)$ )th update interval, \uff0c ${\\mathbf{}}L P_{i}$ only updates the states of its local agents. After that, another Synchronization is required. A similar proce dure is conducted by $L P_{j}.$ The computation of external agent states is redundant computation, as they are computed by both LPs\n"
          ]
        ]
      },
      "3.1.3 Requirements for Agent Models": {
        "content": [
          [
            798.2160484702687,
            424.9531432370617,
            1505.3828997408982,
            773.3097525287462,
            "text",
            "Since the computation of external agents is replicated in LPs,agent models should satisfy the following require ments: i) given the same input values, models of agents always produce the same agent states, including agent based and component-based state variables; and ii) the order of the agents being updated should not affect the result. Otherwise, replicas may generate different states This requirement is met for deterministic models. For sto chastic models, this can be achieved by manipulating the seeds of the random number generators in the two replicat ing LPs to produce the same random number sequence"
          ]
        ]
      }
    },
    "3.2 Sizes of Extended Layers": {
      "content": [
        [
          798.4488435783277,
          884.6112387000288,
          1505.8073806720342,
          1327.9018001993456,
          "text",
          "As described before, a road network is represented as a col lection of links and nodes, and agents are situated on links Sensing ranges of agents usually do not cover entire links thus an extended layer may only cover a portion of links Therefore, we represent an extended layer as a collection of link segments. A link segment is a portion of a link between two points on the link. A link segment can be uniquely iden tified by specifying the link id that the segment is on and displacements of the two points. A displacement of a point on a link is the distance between that point and the start node of the link. Thus, a link segment can be denoted as $S\\epsilon\\,\\mathcal{O}(i d,s,e)\\mathcal{\\prime}$ where id is the id of the link,s is the starting dis placement of the segment on the link, e is the ending dis placement. The length of this segment is le - 8|.\n"
        ]
      ],
      "3.2.2 Sizes of Link Segments": {
        "content": [
          [
            798.390329787635,
            1400.3435843964583,
            1505.2909157469155,
            1557.893636299582,
            "text",
            "To determine the sizes of extended layers, We need to ana lyze the behavior of agents and topology of the road net- work, because front and back sensing ranges of agents may be different and road links can have different lengths and Connectivity too\n"
          ],
          [
            798.8374129501692,
            1559.7679189460646,
            1505.4977222265377,
            1908.7489214212478,
            "text",
            "The agents in the kth extended layer should allow the agents in the $(k-1)$ th layer\uff08or local agents if k=1\uff09to advance one update interval. Therefore, the kth extended layer must cover the sensing ranges of the agents in the $(k-1$ )th layer (or those in the local area if k=1). Meanwhile the movement of agents must also be considered. Different sizes of segments depending on the direction of extenision of extended layers are illustrated in Fig.4. The direction of extension is from the\uff08k-1)th layer to the kth layer\uff08or from the local area to the first layer if k=1). It can be the same as or opposite to the traffic direction of a link\n"
          ],
          [
            798.078151232714,
            1907.5695075351493,
            1505.4811840084415,
            2066.8260080732516,
            "text",
            "In Fig. 4\uff0c $X_{i,j}^{k}$ is in the upstream direction of $X_{i,j}^{k-1}.$ \uff0ci.e., the is part of size direction of extension for $\\displaystyle{X_{i,j}^{k-1}}$ is opposite to the traffic $\\mathbf{\\nabla}V_{l}$ direction. The segment of $X_{i,j}^{k}$ consists of two parts: the firs \uff0c where $\\gamma_{b}$ and the second part of size $V_{l}{\\cdot}\\delta$ \nthe speed limit of link l. The second part, which is marked"
          ],
          [
            186.5062259038762,
            150.66096212408536,
            653.5578387723696,
            209.61981857486288,
            "text",
            "nodez $|{\\it f}\\eta K_{2}$  $\\scriptstyle{n\\geq}$ \n $\\left|\\ast_{,i}^{\\prime},\\ast,\\ast,\\ast,\\ast,\\ast,\\ast,\\ast\\ast,\\ast\\right|$ "
          ],
          [
            69.99633504350281,
            227.34614208856192,
            771.6731230114569,
            309.5121055288776,
            "text",
            " $\\scriptstyle{\\dot{\\mathbf{A}}}$  $G_{\\cal I}$ layer region ${\\bar{X}}_{I,2}^{I}$  $B_{I,2}^{I}$ \u51b0 0II0c ry cut\n"
          ],
          [
            69.04567298411627,
            228.26982155523288,
            773.6462111837545,
            309.43019043806333,
            "table",
            " $\\scriptstyle{\\dot{\\mathbf{A}}}$  $\\scriptstyle{\\widetilde{\\alpha\\Delta}}$  $G_{\\cal I}$ layer YunY $\\textstyle{\\bar{X}}_{I.2}^{I}$  $\\r\\Theta_{>},$ B,2 X 0LLa Xc\n"
          ],
          [
            68.64781070877308,
            347.83039165094226,
            780.7231509673827,
            539.5868781051007,
            "text",
            "Fig.3. Illustration of extended layers and new buffer regions: The view of the network from $L P_{1}.$ \n3.1 Extended Layers on the Network\nWe first explain the idea with the simplest case, i.e.,\uff0cone"
          ],
          [
            68.75319755033797,
            538.6449975546602,
            781.3876723211724,
            730.3641013115144,
            "text",
            "extended layer. Then the generalized multiple layer case is described\n3.1.1 One Extended Layer\nAn extended layer of a partition is defined as the space in the road network immediately next to the boundary of the par"
          ],
          [
            68.07752766559945,
            833.8126063028562,
            780.5653291146931,
            960.5370902859008,
            "text",
            "When Synchronization IS conducted, each LP receives complete agents in its extended layer and shared states in buffer regions from neighboring LPs. Agents in the extended layer still exist in the original LPs, but they are replicated in"
          ],
          [
            68.57187764610336,
            960.1934963139565,
            780.7207883647975,
            1024.0599757373145,
            "text",
            "the receiving 1LEy dIE1 ) as exterhial agehts Of the receiving LP. LPs compute the states of external agents, so as"
          ],
          [
            67.98108425923718,
            1024.6501729452464,
            780.7823735388511,
            1373.056094713047,
            "text",
            "tO emtlate the reCelVe Of a SynChrOn1Z8 atiOn ineSSage Dy prO ducing migrated agent and shard states. This way, the syn chronization operation can be skipped\nThe concepts above are illustrated in Fig. 3. The network is the same as that in Fig. 2. Partition $G_{1}$ has one extended new buffer region of $G_{1}$ inside which is marked as $X_{1.2}^{1}.$  ${B}_{1.2}^{1}$ is the layer in partition $G_{2},$ \n $G_{2}$ \nare replicated to Suppose that at simulation time $t_{\\mathrm{\\scriptscriptstyle{I}}}$ complete agents in $X_{12}^{1}$  $I P_{1}$ from $L P_{2}.$ Agent-based state variables of agents in ${B}_{1,2}{}^{1}$ are send to $I P_{1}$ by $L P_{2}.$  $X_{1.2}^{1}$ P. The agents in are external agents of $L P_{1}.$ States of those agents are"
          ],
          [
            68.4182838676235,
            1373.8071805133116,
            781.2528464669786,
            1470.3210521607841,
            "text",
            "\u4e0a1 1 CV CLILC1 ClLLO\n $t+\\delta,$ the agents hat fall inside $X_{1,2}^{1}$ will function as proxy $\\textstyle{X_{1,2}^{1}}$ agents. Due to movement of agents, agents currently in"
          ]
        ]
      },
      "3.2.3 Segments on Connecting Links": {
        "content": [
          [
            67.66961940718056,
            1469.933252638585,
            780.6987374073359,
            1817.9937010857245,
            "text",
            "Besides computational overheads, extra memory is also required for the computation replication method. It consists of mainly two parts: storing segments of extended layersA and storing external agents. The memory for storing seg ments depends on the total number of segments in the road network. Storing external agents takes memory propor- tional to redundant computation. In our experiment, storing segments is not significant compared to the memory usage of the whole simulation. Memory for storing agents is increased by 1.5 percent \uff08same percentage as redundant computation shown in Table 5)\n"
          ],
          [
            140.91735782277559,
            1867.8776626334454,
            726.1392346613487,
            1926.0016694859823,
            "text",
            "Total Overhead of Calculating Extended Layers d Estimating the Optimum Lookahead (Unit=Second"
          ],
          [
            68.35240663220692,
            1947.3198573795198,
            773.2963097408905,
            2059.1603897893083,
            "table",
            "8 LPs 16 LPs 32 LPs 48 LPs calc extended layer $6.1\\pm1.9$ 1.6\u00b10.5 0.6\u00b10.1 0.2\u58eb0.01 calc lookahead 2.6\u00b10.1 1.2\u58eb0.1 0.8\u58eb0.1 1.0\u58eb0.02"
          ],
          [
            854.8256602328302,
            150.51811119389473,
            1446.1363872330248,
            234.9150147689902,
            "text",
            "Comparison of Average Lookahead, Execution Time and Overhead of Evaluating Optimum Lookahead Using Different Evaluation Periods with 32 LPS"
          ],
          [
            798.3429202290924,
            255.4988471513847,
            1504.8424937762495,
            424.58295239523204,
            "table",
            "reevaluation lookahead execution time overhead period (update intervals> (second) (second) 1 min 4.50\u00b10.15 1275.6\u00b136.8 20.9+ 1.34 5 min 4.47\u58eb0.14 1261.5+22.7 2.98\u58eb0.29 10 min 4.56\u53410.05 1253.8\u534136.6 0.83\u58eb 0.06"
          ],
          [
            797.906547531611,
            513.0974170844704,
            1511.312717216005,
            926.4106506215568,
            "text",
            "Experiments have also been conducted to analyze the effect of different evaluation periods on the average lookahead the overall simulation execution time, and the overhead of adapting the optimum lookahead. The results of using eval uation periods of 1,5, and 10 minutes with 32 LPs are shown in Table 7. There is no significant difference in the average lookahead using different evaluation periods. This is because the traffic condition does not change so often. Therefore, frequent reevaluations of the optimum number of extended layers to replicate is not necessary. The over head of executing the algorithm increases when the fre quency of reevaluation increases,which also results in slight increase of the total execution time\n"
          ],
          [
            798.7211729029788,
            926.9685720580457,
            1510.684894955705,
            1182.202185907901,
            "text",
            "The overhead of evaluating the optimal lookahead with- out adaptive range for 32 LPs is similar to that shown in Table 7. However, for 8 LPs, the overheads with and with out adaptive range are 18.11\u00b10.92, and 43.6\u00b16.6 seconds respectively\uff0cwhen the evaluation period is 1 minute. The benefit of adaptive range is more obvious for more frequent evaluations and fewer LPs \uff08i.e., more available extended layers)\n"
          ]
        ]
      },
      "3.2.4 Searching Algorithm for Determining Extended": {
        "content": [
          [
            798.7818917894176,
            1272.6281933747052,
            1509.3552222207695,
            1779.911068950601,
            "text",
            "In addition to the strong scaling property, it is also interest- ing to analyze the weak scaling property on the MA-CR method. So, we conducted another set of experiments using four different problem sizes created using artificial road net- works. They are 48\u00d716,96\u00d716,192\u00d716, and 384\u00d716 rectan- gular grid networks. Each road link in the road networks is 200 meters long. Agent populations are 5k,10k,20k, and 40k respectively. Simulations with the four different net- works are run with 12,24,48, and 96 LPs, respectively. The road networks are partitioned into stripes vertically. Thus an LP has the same workload for all cases in terms of both the size of the network partition and the number of agents. A larger cluster with four compute nodes was used in the experiments, where each compute node has 24 CPU cores Each case was run four times and the average speed-up was taken. The result is shown in Fig. 11\n"
          ],
          [
            798.4299427576464,
            1780.7656006411107,
            1509.6721259808608,
            2066.3055101894743,
            "text",
            "The results in Fig. 11 show that when the problem size is scaled up proportionally with increasing number of LPs speedup remains increasing for both MA-CR and MA approaches. As expected, the amount of increment becomes less when number of LPs increases. With more LPs,the problem size also becomes larger. Asa result, more commu- nications are required between different compute nodes. In addition, synchronization overhead also increases with the number of LPs. As shown in the figure above, MA-CR"
          ],
          [
            67.94779125114111,
            128.7712377297129,
            775.6962414469095,
            411.62856083398015,
            "text",
            "TABLE 5\nRedundant Computation as a Percentage\nof the Total Simulation Execution Time\n8 LPs 16 LPs 32 ${\\mathfrak{I}}{\\mathfrak{P}}_{5}$ 48 ${\\mathfrak{L P}}_{5}$ Percentage 0.77\u58eb 0.03 $1.16\\pm0.04$ 1.50\u58eb0.03 0.87\u58eb0.03 adaptive computation replication has improved the overall performance of the simulation. The improvement is the result"
          ],
          [
            68.9190424076397,
            449.2635402758107,
            774.4520161721377,
            515.188396809097,
            "text",
            "tion messages, as shown in Fig. 9. This means that the benefit of reduced synchronization messages exceeded redundant"
          ],
          [
            65.83617089184402,
            520.8117350134269,
            763.5727037879318,
            1720.8733717783775,
            "table",
            "When the number of LPs increases from 16 to 32,\uff0cth speed-up using MA-CR increases further; whereas the speed up using MA decreases. This is because the absolute numbe of messages for MA increases drastically as the number o LPs increases, although the percentages of increment on look ahead for MA and MA-CRare similar, as shown in Fig. 9 4.2.3  Redundant Computation and Overhead of\nAlgorithms\nThe amount of redundant computation and the overhead c the proposed method are investigated in this section. Th amount of redundant computation, calculated asa percentag of the total simulation execution time, is shown in Table 5 For all cases in Table 3, redundant computation is les than 1.5 percent of the total execution time.\nThe computational overhead of the method comes fron calculating extended layers\uff08Algorithms 2) and calculatin optimum lookahead. Due to dynamic partitioning of th road network\uff0cAlgorithm 2 was executed 47\u58eb2\uff0c40\u58eb1 $31\\pm1,$ and 28\u00b11 times for 8,16,32, and 48 LPs respectively Optimum lookahead was calculated was executed 114 time for all different numbers of LPs\uff08every 10 minutes i 19 hours simulation time). Both algorithms are executed b every LP, hence, the maximum overhead amongst the LP is collected. Total overheads of the algorithms throughou the simulation are shown in Table 6.\nTable 6 shows that the overheads introduced are at th magnitude of seconds which are insignificant with respec to the overall simulation execution time.\nBesides computational overheads, extra memory is als required for the computation replication method. It consist of mainly two parts: storing segments of extended layer and storing external agents. The memory for storing seg ments depends on the total number of segments in the roa network. Storing external agents takes memory propo tional to redundant computation. In our experiment, storin segments is not significant compared to the memory usag"
          ],
          [
            68.82712732289902,
            1748.7696070244488,
            776.2828756688081,
            2001.0337681907304,
            "text",
            "increased by 1.5 percent \uff08same percentage as redundant computation shown in Table 5)\nTABLE 6\nTotal Overhead of Calculating Extended Layers\nand Estimating the Optimum Lookahead (Unit=Second 8 LPs 16 LPs 32 LPs $48\\ \\mathrm{LPs}$ "
          ],
          [
            68.32385359554736,
            2002.3015931773386,
            774.8606676659532,
            2064.15210340312,
            "text",
            "CalC eXteItted IdyeI O.1\u58eb1.9 1 .0\u58ebU.5 U.0\u58ebU.1 U.2\u58ebU.U1 calc lookahead 2.6\u00b10.1 1.2\u58eb0.1 0.8\u58eb 0.1 1.0\u58eb0.02"
          ],
          [
            997.1855390571585,
            152.27527160267542,
            1294.4125693226206,
            180.8721566492055,
            "text",
            "of Average Lookahead, EX"
          ],
          [
            795.3095747699884,
            198.51519641595942,
            1507.9088369181263,
            970.9100329628126,
            "table",
            "Using Different Evaluation Periods with 32 LPs\nreevaluation lookahead execution time overhead period (update intervals) (second) (second\uff09 1 min 4.50\u00b10.15 $1275.6\\pm36.8$  $20.9\\pm1.34$ 5 min 4.47\u00b10.14 1261.5\u58eb22.7 2.98\u58eb0.29 10 min 4.56\u00b10.05 1253.8\u571f36.6 0.83\u58eb 0.06 4.2.4Frequency of Evaluation\nExperiments have also been conducted to analyze the effect of different evaluation periods on the average lookahead the overall simulation execution time, and the overhead of adapting the optimum lookahead. The results of using eval- uation periods of 1\uff0c5,and 10 minutes with 32 LPs are shown in Table 7. There is no significant difference in the average lookahead using different evaluation periods. This is because the traffic condition does not change SO often Therefore, frequent reevaluations of the optimum number of extended layers to replicate is not necessary. The over- head of executing the algorithm increases when the fre- quency of reevaluation increases\uff0cwhich also results in slight increase of the total execution time.\nThe overhead of evaluating the optimal lookahead with-"
          ],
          [
            797.5231758854568,
            1019.5220839832361,
            1506.511908762933,
            1271.643169514589,
            "text",
            "out adaptive range are 18.11\u58eb0.92, and 43.6\u00b16.6 seconds respectively\uff0cwhen the evaluation period is 1 minute The benefit of adaptive range is more obvious for more frequent evaluations and fewer LPs(i.e.,more available extended layers\uff09\n4.2.5 Weak Scaling Property\n"
          ]
        ]
      }
    },
    "3.3 Adaptive Extended Layers": {
      "content": [
        [
          798.5368899013351,
          1334.168202508123,
          1506.5681387044601,
          1616.740783854071,
          "text",
          "The maximum number of extended layers that a partition can have is decided by the road network. However, to reduce the total execution time of the simulation, it may not be beneficial to replicate all available extended layers due to redundan computation and extra data in messages. This section introdu ces a method to determine the suitable number of extended layers to replicate using run-time traffic information. We start with analyzing the overhead of computation replication. The notation used in this section is listed in Table 1\n"
        ]
      ],
      "3.3.1 Analysis of Overhead": {
        "content": [
          [
            798.2598353715139,
            1686.3735954058734,
            1506.2419420408671,
            1876.9959357647674,
            "text",
            "Here, we formulate the total overhead incurred for a pair of LPs when a certain number of extended layers is replicated. The MA protocol introduced in Section 2.3 is used for syn chronization between LPs. Therefore\uff0cthe number of extended layers replicated for $\\textstyle G_{i}$ inside $G_{j}$ and for $G_{j}$ inside $G_{i}$ will always be equal\n"
          ],
          [
            798.8163857871612,
            1877.756173176175,
            1506.29407680458,
            2066.72501350742,
            "text",
            "Considering a pair of neighboring partitions $G_{i}$ and $G_{j},$ there are $K_{i,j}$ available extended layers between the two Let a unit of computation be the wall-clock time required for processing the events from one agent during one update interval. If $\\bigwedge_{\\Phi}$  $1\\,\\leq\\,k\\,\\leq\\,K_{i,j},$ \uff09layers are replicated, the total units of redundant computation in $L P_{i}$ between two"
          ],
          [
            97.0,
            116.0,
            736.0,
            240.0,
            "isolated formula",
            "k, using function search Downstream. If $e\\prec s,$ the sea ntinues towards the upstream direction of the link, us nction searchUpstream.(For more details of functi"
          ],
          [
            75.56746514738195,
            124.773474882423,
            742.9016637428947,
            241.36800372103386,
            "figure",
            "ink, using function search Doumstream. If $e\\prec s,$ the sear ontinues towards the upstream direction of the link, usi unction searchUpstream.\uff08For more details of functic"
          ],
          [
            69.37029457931908,
            260.52018093519143,
            776.2920110654707,
            446.91717340271515,
            "text",
            "AlgOrithms 5 and 4 1n t the appendiX, available in the online supplemental material). In functions searchDoun,stream and searchUpstream, when the remaining space on a link is not enough for a layer, the searching will expand to the connect- ing links.\n"
          ],
          [
            67.8864915582333,
            475.9550721389186,
            775.307042047712,
            794.6125787892931,
            "text",
            "Layers of $G_{i}$ Inside $\\textstyle G_{j}$ by V\n $L P_{j}$ \n1: Definitions:\n2: $\\textstyle\\int_{\\Omega}$ index of the extended layer $X_{_{\\!_{2}}i j}^{k}$  $G_{j}$ from $\\textstyle{G_{i}}$ \n3: $\\,I_{j,i}$ set of incoming boundary links of\n4: ${\\cal O}_{j,i}$ set of outgoing boundary links of $G_{j}$ towards $\\textstyle{G_{i}}$ :\n5: $S_{a d d}$ candidate segments to be added to an extended layer 6: $S_{c o n t}$ segments in $S_{a d d}$ from which the next layer continues 7: $S_{c h e c k}$ all segments that are already inside extended layers 8: $\\mathrm{L}_{l}$ length of link ${\\mathit{l}}_{}^{}$ \n9: $\\nabla_{l}$ speed-limit of the traffic on link ${\\mathit{l}}_{}^{}$ \n"
          ],
          [
            67.54748761979326,
            793.9954170128138,
            775.5814977146896,
            1366.5975902810733,
            "text",
            "10: a flag that indicates if the searching should continue 14: 11: initialize $k arrow1,\\zeta arrow t r u e;$ do into $S_{a d d},S_{c o n t}$ and $S_{c h e c k};$ 13: 12: foreach link $l\\in I_{j,i}$ \nend put segment $S{\\mathcal{C}}{\\mathcal{O}}_{(l,{\\underline{{l}}},{\\underline{{l}}}}+\\gamma_{f})$ \n16: 15: foreach $l i n k\\;l\\in{\\cal O}_{j,i}$ do into $S_{a d d},\\,S_{c o n t}$ and SeheckA 17: end put segment $\\displaystyle S\\mathcal{C}\\mathcal{O}_{(l,\\underline{{{l}}},\\underline{{{L}}},\\underline{{{l}}},}-\\gamma_{b}-V_{l}.\\delta)$ \n// search layer by layer\n18: while  do\n19: foreach $s e g_{(i d.s.e)}\\in\\,S_{a d d}$ do $X_{i,j}^{k},$ \n20: put $S e g(i d,s,e)$ into layer\n21: end\n22: $\\mathrm{S}_{t e m}p_{-}c o m t\\iff\\mathrm{S}_{c o m t}i$ \n23: ${\\sf S}_{a d d}\\longleftrightarrow\\,{\\cal G},\\;{\\sf G}_{c o m t}\\longleftrightarrow\\,{\\cal G},$ \n/ / search segments for the next layer\n24: foreach $s e g_{(i d,s,e)}\\in S_{t e m p_{-}c o n l}$ do\n25: if $\\zeta\\wedge\\left(s\\;<\\;e\\right)$ then\n\u95f4\u95f4r.\n"
          ],
          [
            68.5926734709416,
            1447.9442189639149,
            775.8912349136058,
            1669.875038152327,
            "text",
            "/C1\u4e0aeCC1On O\u5de5 eXCens1On 1S UpsC\u4e0aeain 28: searchUpstream(id, e,Y\u3002+ Va\u00b78)\u5143\n29: end\n30: end\n31: if $S_{a d d}=\\mathcal{Q}$ then\n32: \u2190 false; // whole $G_{j}$ has been searched 33: end\n34\u00b7 l\u3002 L\u3002L1\n"
          ],
          [
            71.87803479455279,
            1710.4274613447606,
            767.0562825463503,
            1914.9347568676383,
            "figure",
            "The searching terminates if the whole area of $G_{j}$ ; has beer \uff08r:\nsearched\uff08Algorithm 2 line 32\uff09or the extension reaches hird partition. In other Words,extended layers of C $G_{i}$ z; insid $G_{j}$ is restricted within $G_{j}$ only. Otherwise, if they wer extended to a third partition $G_{q},$  ${\\cal L}P_{q}$ would also need tc"
          ],
          [
            103.0,
            1713.0,
            624.0,
            1914.0,
            "isolated formula",
            "The searching terminates if the whole area o rched\uff08Algorithm 2 line 32\uff09or the extensi rd partition. In other Words, extended layer is restricted within $G_{j}$ only. Otherwise, ended to a third partition $G_{q},$  ${\\cal L}P_{q}$ would"
          ],
          [
            69.0868905550501,
            1938.5331667305165,
            774.850350967998,
            2066.4011118415965,
            "text",
            "and $L P_{j}.$ This may introduce extra communication which will downgrade the benefit of computation replication Algorithm 2 is executed after partitions are determined If partitions change dynamically during the simulation"
          ],
          [
            887.0,
            121.0,
            1472.0,
            303.0,
            "isolated formula",
            "TABLE1\nNotation Used in the Analysis Description\nnumber of agents in extended laye $X_{i,j}^{k}$  $G_{j}$ available extended layers between $G_{i}$ and"
          ],
          [
            803.9355943152951,
            123.43307026547477,
            1498.6568851945879,
            291.0278120788532,
            "figure",
            "TABLE1\nNotation Used in the Analysis Notation Description\n $\\textstyle\\left|A_{i,j}^{k}\\right|$ number of agents in extended layer $\\displaystyle{X_{i,j}^{k}}$ "
          ],
          [
            798.1695051993407,
            310.7750074389557,
            1506.0915230096111,
            414.98842778579416,
            "text",
            " $K_{i,j}^{m}$ adaptive range of extended layers between ${\\mathcal{L}}P_{i}$ and $L P_{j}\\ln$ the mth evaluation period\n $|M_{i,j}|$ number of migrating agents from ${\\cal L}P_{i}$ to ${\\cal L}P_{j}$ in one\nSynchronization\n"
          ],
          [
            797.8535464802836,
            445.07761785208925,
            1506.7539967744938,
            539.4411468687243,
            "text",
            "in one synchronization\n $T a$ computational workload of one agent in one update interval in terms of wall-clock time\n"
          ],
          [
            798.6250149777621,
            538.2159749269091,
            1506.7502166103575,
            821.5869526343,
            "text",
            "Vt SdBF\"PdSSllB since MA protocol is $\\sqrt{{\\bf\\nu}_{\\bar{\\nu}_{\\bar{\\lambda}}}}\\cdot$ obtainable optimum number of extended layers to repli used) cate between $L P,$ and $L P_{j}\\,(\\hat{k}_{i,j}=\\hat{k}_{j,i}$ \n $\\textstyle\\sqrt{\\ _{\\bar{\\nu}_{\\dot{\\nu}_{\\perp}}}}$  $\\widehat{\\cal N}_{\\downarrow}_{i,j}$ for the mth evaluation period $L P_{i},$ relative to $L P_{j}$ in one synchroniza $o_{i,j}(k)$ total overhead for\ntion cycle, when $\\textstyle{\\mathit{\\int}}$ layers are replicated, including redun- dant computation and message-passing overhead\n $o_{i,j}(\\tau,\\ k)$ total overhead for $L P_{i},$ relative to $L P_{j}$ during time period 2\nt when k layers are replicated\n $s\\colon{\\mathfrak{z}}(k)$ hyrerhead of sendino a Sync ronization messaoe fron $L P;$ "
          ],
          [
            798.5068848485035,
            820.8986207390185,
            1506.770692499429,
            1039.952320463428,
            "text",
            "\uff0c./\\\" O\nto ${\\mathcal{L}}P_{i}$ when $\\textstyle\\int_{\\mathbf{t}}$ layers are replicated\n $s r l$ send and receive latency of sending a message\n $\\Gamma_{i,j}(k)$ redundant computation between two consecutive\nsynchronization operations in ${\\cal L}P_{i}$ due to external agents from $L P_{j},$ when $\\textstyle\\bigwedge$ layers are replicated\nled layers need to be recalculated The time and sn"
          ],
          [
            798.8901777412381,
            1145.9356583198485,
            1506.8566912335293,
            1272.3131164767701,
            "text",
            "the current partition only once. The time for searching and adding segments in the while loop and for loop, and the memory required to store the segments, are both propor- tional to the number of segments in the partition\n"
          ],
          [
            799.591476941937,
            1270.5407272150712,
            1506.1194017201162,
            1653.4547598583817,
            "text",
            "3.3 Adaptive Extended Layers\nThe maximum number of extended layers that a partition can have is decided by the road network. However, to reduce the total execution time of the simulation, it may not be beneficia to replicate all available extended layers due to redundant computation and extra data in messages. This section introdu- ces a method to determine the suitable number of extended layers to replicate using run-time traffic information. We start with analyzing the overhead of computation replication. The notation used in this section is listed in Table 1.\n"
          ],
          [
            798.329295887518,
            1652.7951901695508,
            1505.0918271024047,
            2067.2087415249966,
            "text",
            "3.3.1AnalySiS ${\\boldsymbol{O}}{\\boldsymbol{f}}$ OVerheaa\nHere, we formulate the total overhead incurred for a pair of LPs when a certain number of extended layers is replicated The MA protocol introduced in Section 2.3 is used for syn chronization between LPs. Therefore,the number of extended layers replicated for $\\textstyle G_{i}$ inside C $G_{j}$ ; and for $G_{j}$ inside \uff08\n $G_{i}$ will always be equal.\nConsidering a pair of neighboring partitions $G_{i}$ and $G_{j},$ there are $K_{i,j}$ available extended layers between the two. Let a unit of computation be the wall-clock time required for processing the events from one agent during one update interval. If $\\bigwedge_{\\varnothing}$  $\\mathrm{\\Delta}^{\\prime}\\mathrm{\\leq}\\;k\\leq K_{i,j}\\mathrm{)}$ layers are replicated,the total units of redundant computation in $L P_{i}$ between two"
          ]
        ]
      },
      "3.3.2 Dynamic Determination of the Optimum Number": {
        "content": [
          [
            136.9332026416235,
            2092.828513499161,
            1281.5145705362231,
            2131.721716906981,
            "text",
            "Authorized licensed use limited to: Southeast University. Downloaded on December 21,2022 at 05:11:40 UTC from IEEE Xplore. R"
          ],
          [
            66.2671292917345,
            123.35734476880428,
            563.4384107498418,
            162.89128352287875,
            "text",
            "LPj ${\\mathfrak{r}}_{b}$  $V_{i}{\\boldsymbol{\\delta}}$  ${\\mathfrak{p}}_{b}$  $l i n k\\,l$ LP: link m \u65b9\u4e00\u6c5f"
          ],
          [
            276.0,
            181.0,
            566.0,
            266.0,
            "isolated formula",
            " $X_{i,q}^{\\bullet,q}:\\{\\,$ \nupstream extending dc"
          ],
          [
            68.26986320438742,
            284.18812670059634,
            776.9032951076746,
            385.06645889989954,
            "text",
            "neighboring partitions $G_{j}$ and $G_{q}.$  $\\textstyle X_{i,j}^{k}$ and $X_{i,q}^{k}$ are on link ${\\mathit{l}}_{}^{}$ and ${\\mathcal{N}}{\\mathcal{I}}{\\mathcal{I}}_{3}$ respectively. The solid arrows indicate the traffic directions on links. The empty arrows indicate the directions of extension of extended layers tian af oytan o $X_{\\ i}^{k}\\,.$ otA +rnHfioairA6+iA of lin"
          ],
          [
            68.35316463386967,
            382.19706110779913,
            778.4508785543826,
            479.7297031814792,
            "text",
            " $\\binom{\\alpha}{1}$ i.e,extending upstream; the direction of extension of $X_{i,q}^{k}$ is the same as the traffic direction of link ${\\mathcal{H}},$ i.e.,extending downstream.\n"
          ],
          [
            200.0,
            506.0,
            639.0,
            587.0,
            "isolated formula",
            "ie first part of $X_{i,j}^{k}$ contains all the ager $X_{i_{2}j}^{k-1}$ . Its t round of state update for\n"
          ],
          [
            69.21692229483158,
            606.6463301431272,
            777.5193043550487,
            736.0765860136781,
            "text",
            "update interval. In contrast, for $X_{i,q}^{K-}$ \uff0cthe direction of exten is in the requires a size of $\\gamma_{f},$ sion is the same as the traffic direction,i.e. $X_{i,q}^{k}$  $X_{i,q}^{k}$ only downstream direction of $X_{i,q}^{k-1}$ . The segment of $X_{i,q}^{k}$ will stil because after an update\n"
          ],
          [
            249.0,
            748.0,
            593.0,
            831.0,
            "isolated formula",
            "hat happens to the second pa"
          ],
          [
            67.9273891934004,
            850.7528922156964,
            777.6519251134964,
            981.0670139589041,
            "text",
            "depicted in Fig. 5. Supposing a synchronization operation is performed at time O, $I P_{2}$ receives complete agents in two layers of extended layers and shared states in the buffer regions from $L P_{1}$ and $I P_{\\omega}$ A s shown in Hig 5a\uff0cstates of the"
          ],
          [
            67.68970645124325,
            977.1395019837614,
            777.3521895988574,
            1043.2081695493002,
            "text",
            "agents in $X_{2.1}^{2},\\ X_{2.1}^{1},\\ G_{2},\\ X_{2.3}^{1},$ and $X_{23}^{2}$ (i.e., the dark gray $\\delta,\\,X_{\\cdot,\\iota}^{2}$ are uundated hy T P\u3001 Fig 5h shows that at time\n"
          ],
          [
            280.0,
            1064.0,
            562.0,
            1105.0,
            "isolated formula",
            "22,1 1ulicLiOll ds Dul rked with a cross)is d"
          ],
          [
            68.77846263173316,
            1121.9304920259742,
            778.4412706372028,
            1251.4303655098654,
            "text",
            "5LdLCb 1may move into the region). Agents in $X_{2,1}^{1},$  $G_{2},$ and ${X_{2,3}^{1}}$ are updated. As the simulation progresses to time 28 as shown in Fig. 5c $X_{23}^{1}$ and the first part of ${X_{2,1}^{1}}$ function as buffer"
          ],
          [
            67.80697029288736,
            1250.3086394582956,
            777.6248339371865,
            1377.7917266364725,
            "text",
            "\u5df21OILS\u3002OlIILlldI' LO \u4e8c1OI marked with a crOSs in $X_{2,1}^{1}$ is dropped. Agents in $G_{2}$ will be X51\nupdated. It can be noticed that we have updated agents in $G_{2}$ for three update intervals with one synchronization.\n"
          ],
          [
            182.0,
            1402.0,
            661.0,
            1466.0,
            "isolated formula",
            "egments on Connecting Links"
          ],
          [
            67.66640036115825,
            1483.1512841404976,
            777.9822169549037,
            1611.8569285144488,
            "text",
            "the layer will expand to its connecting links. Link segments on the connecting links may have various sizes depending on how they connect to the link, and how agents sense the connecting links. In our network representation, there are"
          ],
          [
            67.62056094891717,
            1609.4399226428404,
            777.8947219058327,
            1899.5919173641944,
            "text",
            "four basic cases of how a link $\\textstyle{\\mathcal{L}}$ can connect to another link y: i) they share the same start node; i) they share the same LP $V_{I}{\\boldsymbol{\\delta}}$  ${\\boldsymbol{\\gamma}}^{\\prime}{\\boldsymbol{b}}$  $\\frac{i\\sp{*}\\!f\\gamma\\backslash\\hat{N}_{j}}{ arrow}\\nonumber$  ${\\mathsf{L P}}_{2}$ linkz $\\gamma_{f}$ LP3\n $B_{2,l}^{2}$  $X_{2,l}^{2}$  $X_{2,l}^{l}$  $G_{2}$  $X_{2,3}^{I}$  $X_{2,3}^{2}$  $\\textstyle B_{2,3}^{2};i$ (a) time ${\\boldsymbol{\\theta}}$  $V_{L{\\overset{\\partial}{\\doublebarwedge}}}$  $\\scriptstyle\\gamma_{b}$  ${\\mathrm{?}}\\!\\!\\!{\\bar{\\mathbb{Z}}}$ \nbuffer $X_{2,l}^{l}$  $G_{2}$  $X_{2,3}^{j}$  $\\begin{array}{r}{{\\hat{\\mathbf{\\omega}}}\\cdot\\mathbf{\\omega}\\cdot\\mathbf{\\omega}\\cdot\\mathbf{\\omega}\\cdot\\mathbf{\\omega}\\cdot\\mathbf{\\omega}_{1}}\\\\ {\\iint\\!\\!\\!\\left\\{{\\hat{\\mathbf{q}}}\\right.\\mathbf{\\omega}\\cdot\\mathbf{\\hat{\\Pi}}.}\\end{array}$ (b) time $\\delta$ tRW\nbuffer\n ${\\boldsymbol{C}},$ new (c) time 2"
          ],
          [
            103.77315985021468,
            1894.9463307575543,
            682.9219568994225,
            1931.0411022150413,
            "text",
            "burrer V2 bufrer \u4e0a"
          ],
          [
            110.0,
            1952.0,
            705.0,
            2041.0,
            "isolated formula",
            "2PTVyIeSSll g ti llO\nextended layers in $\\int_{\\mathcal{M}}\\mathcal{L}$ and ${\\cal L P}_{3}$ \nP:(a\uff09At time O,there a nded layers for \uff08r in $G_{1}$ and $G_{3}.$ b) At time 8, $\\scriptstyle X_{2,1}^{2}$ and $\\scriptstyle{X_{24}^{2}}$  $G_{2}$ \nhe crossed reqion, function as buffer reqions $\\mathbf{\\Psi}(\\mathbf{G})$ At time Z"
          ],
          [
            811.6112963474257,
            125.62199061426823,
            1500.2467592275705,
            490.48848432105933,
            "figure",
            " $\\operatorname{LP}_{\\mathrm{{j}}}$  $l i n k\\;b$ LP: VL $l i n k~c$  $B_{i,q}^{k}$ LPq $l i n_{z}\\,a$  $l{\\ i}a k I$ link m link $ .\\mathcal{A}_{}$  $B_{i j}^{\\,\\,k}$  ${}_{;}^{2}X_{i j}^{k}$  $\\{X_{i j}^{k,I},$  $X_{i j}^{I},$ G, X/, $X_{i,q}^{k,I}\\}$  $\\displaystyle\\chi_{i,q}^{k}$  $\\begin{array}{r l}{\\bigcup}&{{}\\quad}\\\\ {\\mid}&{{}}&{{}}\\\\ {\\mid}&{{}}&{{}}\\end{array}$  ${\\tilde{\\gamma}}_{b}$  $V_{a}^{*}\\delta$  $\\gamma_{b}$ y ${\\dot{\\gamma}}_{f}$ \nig.6. Four basic cases of extended layer segments on connecting linkS ${^{\\nu}}_{q},$ i.e., ustrated by links a,b,c, and $d.$ The kth extended layers of $G_{i}$ in $G_{j}$ ; anc $X_{i,j}^{k}$ and X'.,have extra segments on link a and link c respec $X_{i,q}^{k}$ \nvely (marked by a wavy pattern)\nnd node; iii) the start node of link z is the end node of thc"
          ]
        ]
      }
    },
    "3.4 Overall Execution of the Simulation": {
      "content": [
        [
          799.9678395337552,
          506.96273260750615,
          1506.5574282394073,
          561.0300835437214,
          "text",
          "Fig. 7. Heat map of the dynamic traffic densities on main roads in a simu lation of Singapore city traffic from 5 am to 12 am\n"
        ],
        [
          798.5442139693492,
          602.4237604194254,
          1507.1576868028803,
          1021.543936359405,
          "text",
          "where $D_{a}$ and $D_{s}$ are the data sizes of a complete agent and the shared state of an agent respectively $M_{j,i}$ is the set of migrating agents from $L P_{j}$ ; to $L P_{i}$ at the time of synchroniza- tion, ${S}_{j,i}^{k}$  is the set of shared states that $L P_{j}$ sends to $L P_{i}$ P; \uff0c P dur- ing the synchronization,bw is the available bandwidth for message-passing, and srl is a send and receive latency for the message. Values of $b w$ and srl should be calibrated according to the actual simulation environment. They are not necessar ily constants and can be different for different LP pairs. In general, message-passing time increases as the message size increases. So, this equation shows that as the number of repli cated extended layers increases, the overhead of passing one synchronization message increases as well.\n"
        ]
      ]
    }
  },
  "4 EXPERIMENTS AND RESULTS": {
    "content": [
      [
        795.6495532819949,
        1014.5137013634136,
        1508.1726608734707,
        1146.2955127437351,
        "text",
        "In order to compare the overhead of synchronization using different numbers of extended layers, we define the period total overhead for $L P_{i},$ relative to $L P_{j},$ during a simulation $\\tau,\\tau\\gg\\delta,$ with $ \\lbrace{\\hat{K}} \\rbrace$ extended layers, as followS:\n"
      ],
      [
        984.0,
        1172.0,
        1321.0,
        1236.0,
        "isolated formula",
        "\n$$\nO_{i,j}(\\tau,\\,k)=\\frac{\\tau}{(k+1)\\cdot\\delta}\\cdot O_{i,j}(k).\n$$\n"
      ],
      [
        798.8392242788178,
        1254.3047885170133,
        1507.3915844588125,
        1830.6265197393457,
        "text",
        "Equation\uff087\uff09shows that as the number of replicated extended layers (i.e.,k) increases, the number of synchroni zation operations during period t (i.e., the first term of the right-hand side of Equation (7)) decreases; however the total overhead per synchronization cycle \uff08i.e., the second term of the right-hand side of Equation (7)\uff09 increases. The optimum $\\boldsymbol{k}$ should give the best trade-off between the benefit of reduc- ing the synchronization frequency and the total overhead caused by redundant computation. It can be noticed from Equations (2) and (6) that the total overhead is influenced by many factors, including the numbers of agents in the extended layers, time to compute agent states for one update interval, data sizes of complete agents and shared states message-passing bandwidth, and send and receive latency Obviously, $o_{i,j}(\\tau,\\ k)$ is not guaranteed to be a simple convex or concave function, thus the optimum $\\bigwedge_{\\varnothing}$ cannot always be determined mathematically using Equation (7). A naive way is to traverse all possible $\\boldsymbol{k}$ values and pick the optimum"
      ]
    ],
    "4.1.2 Workload": {
      "content": [
        [
          798.383950760655,
          1940.1678732709963,
          1510.3334971978702,
          2070.6218022165813,
          "text",
          "Traffic density and flow on the roads often change through out the simulation. To give an example, the traffic densities on main roads in our simulation of Singapore city traffic are shown in Fig. 7.\n"
        ],
        [
          67.83447000256102,
          127.33789727594181,
          776.1274951721232,
          444.73136827869706,
          "text",
          "Consecutive synchronization operations is\n$$\n\\sum_{x=1}^{k}\\left(|A_{i,j}^{x}|\\cdot\\left(k+1-x\\right)\\right),\n$$ (1)\nwhere $\\left|{A_{i,j}^{x}}\\right|$ is the number of agents in layer $X_{i,j}^{x},$ . It can be estimated using the sizes of the segments in the extended layer and agent densities on the segments.\nTherefore, the redundant computation in terms of wall clock time in $L P_{i},$ relative to $L P_{j}$ between two consecutive"
        ],
        [
          68.27836365160533,
          446.9375193953464,
          775.7316017322676,
          763.0777610056048,
          "text",
          "synchronization operations is\n$$\n\\Gamma_{i,j}(k)=T a\\cdot\\sum_{x=1}^{k}\\left(|A_{i,j}^{x}|\\cdot\\left(k+1-x\\right)\\right),\n$$ (2)\nwhere $T a$ is a unit of computation, i.e., the wall-clock time for computing the events of an agent in one update interval. From Equation (2), We can derive the difference quotient of $\\Gamma_{i,j}$ between $k+1$ and $\\boldsymbol{k}$ : as\n"
        ],
        [
          67.96334997358223,
          764.8382204884919,
          774.0905379766062,
          1211.4441982569265,
          "text",
          "\n$$\n\\Delta\\Gamma_{i,j}(k+1,k)=T a\\cdot\\sum_{x=1}^{*}|A_{i,j}^{x}|.\n$$ (3)\nIt is known that $|A_{i,j}^{x}|\\geq0;$ therefore $\\Delta\\Gamma_{i,j}(k+1,k)\\geq0$ . This equation shows that if extended layers are not empty \uff08i.e. $|A_{i,j}^{x}|\\;>\\;|$ 0),the redundant computation increases with an increasing $\\boldsymbol{k}$ and the increase becomes faster as $\\bigwedge_{\\varnothing}$ increases. The total overhead for $L P_{i},$ relative to $L P_{j},$ in one syn chronization cycle using $\\boldsymbol{k}$ extended layers is\n$$\no_{i,j}(k)=\\Gamma_{i,j}(k)+s_{i,j}(k),\n$$ (4)\nwhere $s_{i,j}(k)$ is the overhead for sending one messages fron $L P_{j}$ to ${\\mathbf{}}L P_{i}$ during synchronization when $L P_{i}$ needs to wait for the $\\boldsymbol{k}$ extended layers replicated. It is the time that\n"
        ]
      ]
    },
    "4.2 Results": {
      "content": [
        [
          164.0,
          1240.0,
          679.0,
          1328.0,
          "isolated formula",
          "\n$$\nK_{i,j}^{m}=\\left\\{\\begin{array}{l l}{{K_{i,j},}}&{{\\mathrm{if}\\ m=1}}\\\\ {{\\mathrm{Inin}(K_{i,j},\\;2\\cdot\\dot{k}_{i,j}^{m-1}+1),}}&{{\\mathrm{otherwise}\\,,}}\\end{array}\\right.\n$$\n"
        ],
        [
          68.06479422208311,
          1350.2146538290253,
          776.2942949146363,
          1706.8166604838286,
          "text",
          "where $\\hat{k}_{i,j}^{m-1}$ is the obtainable optimum $\\bigwedge_{\\varnothing}$ value between $L P_{i}$ and $L P_{j}$ in period $\\tau_{m-1}.$ The adaptive range limits the search range in period $\\tau_{m},$ such that the resultant lookahead is at most twice of that in $\\tau_{m-1}.$ 1.Meanwhile\uff0cit ensures that the lookahead is able to grow exponentially if necessary. In the first period\uff08i.e.\uff0cT1)\uff0cthe entire range of $[0,K_{i,j}]$ is searched. In period $\\tau_{m}\\,$  $(m\\,>\\,1),$ the search range of $\\boldsymbol{k}$ is [0, $\\operatorname{min}(K_{i,j},$  $,\\cdot\\hat{k}_{i,j}^{m-1}+\\bot)].~k=0$ here refers to the case where there are no extended layers. When $k=0,$  $o_{i,j}(0)=s_{i,j}(0).$ Based on Equation (6) $s_{i,j}(0)$ can be derived as follows:\n"
        ],
        [
          218.0,
          1729.0,
          623.0,
          1792.0,
          "isolated formula",
          "\n$$\ns_{i,j}(0)=\\frac{D_{a}}{b}\\cdot\\left|M_{j,i}\\right|+\\frac{D_{s}}{b}\\cdot\\left|S_{j,i}\\right|+C,\n$$\n"
        ],
        [
          68.32083635516254,
          1809.4407033641317,
          774.7236367160132,
          1875.1696990767875,
          "text",
          "where $|S_{j,i}|$ is the number Of shared states $L P_{j}$ sends to $L P_{i}$ during synchronization when there are $\\mathrm{TO}$ extended layers"
        ],
        [
          67.76056484044358,
          1877.7269207048419,
          776.8847880540907,
          2067.111832499854,
          "text",
          "To determine the  obtainable optimum number of extended layers to replicate (i.e., $\\hat{k}_{i,j}^{m})_{,}$ the adaptive range is first determined. Then, for each value $ \\lbrace{\\hat{K}} \\rbrace$ in the adaptive range,the overhead is calculated as the larger value between $O_{i,j}\\left(\\tau_{m},k\\right)$ and ${\\cal O}_{j,i}(\\tau_{m},k).$  $\\bigwedge_{\\bar{q}_{1},\\bar{\\Lambda}}^{\\bar{\\gamma}\\bar{\\gamma}}$ will be the value that gives the minimum overhead in the range\n"
        ],
        [
          937.1709444488453,
          130.14924974870334,
          1377.7067534902608,
          370.81278368873416,
          "figure",
          " $\\textstyle{\\underset{\\mathrm{Fl}}{\\operatorname{e}_{1,{\\frac{\\infty}{\\sqrt{0}}}}}}$ "
        ],
        [
          801.6036268103096,
          395.1530868853266,
          1386.3028467361553,
          418.61977891639174,
          "text",
          "|O,O\uff0cO|[IOaOOTeC neO USInd METIo"
        ],
        [
          798.8508797849047,
          477.66568802539996,
          1507.41111530685,
          761.8057687674938,
          "text",
          "When computation replication is incorporated to the MA synchronization protocol, the execution of the simulation shown in Algorithm 1 needs to be slightly altered. The first change is that lookahead is determined at the beginning o each evaluation period (by determining ${\\hat{k}}_{i,j})$ and is kept fixed during the period, instead of being determined in syn chronization operations. The second change is that external agents are sent between LPs during synchronization and their states are updated by the corresponding LPs\n"
        ],
        [
          798.7007757673267,
          762.5221274719017,
          1505.9587447443243,
          888.5248598368289,
          "text",
          "The effectiveness of the proposed method of dynamically determining the number of extended layers to be replicated has been investigated in experiments and the results will be presented in the next section\n"
        ],
        [
          798.2108507445813,
          1043.0009509255544,
          1506.4581989308301,
          1295.7540696014946,
          "text",
          "The proposed heuristics were experimented with SEMSim Traffic simulator [18]. It is implemented using C++.Commu nication between LPs is realized using OpenMPI 1.8.1. The experiments were run on a cluster composed of three compute nodes. The hardware of each compute node is: $O c t a c o r e\\;I n t e l(R)\\:X e o n(R)/2.6\\;($  $G H z\\times2$ CPUs, 192 ${\\mathit{G}}{\\mathit{B}}$ memory Compute nodes are connected via_ 56 Gbps InfiniBand. Differ ent LPs are mapped to different CPU cores\n"
        ],
        [
          798.8096129930836,
          1369.619746439535,
          1506.2195760697275,
          1941.4724681238056,
          "text",
          "Experiments used a real-world road network. It is the road network of Singapore city consisting of approximately 80,000 links and 40,000 nodes in our representation Agents move on the road network according to their trips derived from the data of the Household Interview and Travel Survey\uff08HITS)in 2008. In every update interval agent states are updated by the Intelligent Driver Mode [19] and a rule-based lane-changing model. They form the major computational workload of the simulation. The computation time for models in an agent in one update interval is around 2us. The data size of migrated agents and shared states are around 200 and 100 bytes, respec tively. The update interval (i.e.,) is 0.5 seconds; and the front and back sensing ranges of agents are 40 and 20 meters respectively. The road network is initially parti tioned using METIS [20]. An example of the road network in four partitions is shown in Fig.8. Different intensities of gray represent different partitions\n"
        ]
      ],
      "4.2.2 Overall Speed-Up": {
        "content": [
          [
            798.3627660908079,
            1942.131220704499,
            1506.1526356631475,
            2067.4576326637703,
            "text",
            "The traffic of 19 hours from 5 am to the midnight of the same day was simulated. To reduce the influence of work load imbalance of LPs, dynamic load-balancing described in [15] was employed. Dynamic load-balancing repartitions"
          ],
          [
            150.6955497396292,
            126.3169308716142,
            693.604385734864,
            730.0080872958756,
            "figure",
            "heat map in Fig. 7 shows that at a certain time fferent roads can have different traffic densitie sity on the same link also changes through tion. Due to computation overhead, it is impi mpute the optimum number of extended la te whenever traffic condition changes. Hence \uff0cwe propose a heuristic that periodically adju r of extended layers for computation replicati the obtainable optimum number of extended cate as ${\\hat{k}}_{i,j}.$ \npose that the simulation time from the start n be segmented into / $\\bar{M}$ \uff08 $M\\geq1)$ periods, and the traffic flow and density of links have no d al changes. Denote the mth\uff081 $\\leq\\,m\\leq\\,M\\Big)$ pe ${\\hat{k}}_{i,j}$ \npvaluation of k;,;is only required at the begin eriod. So\uff0c lookahead remains constant duri Obviously, the smaller the period is, the mor $\\diamondsuit_{\\ell_{1,j}},$ can be determined, but the more frequent r ill be required. The size of a period (i.e.,\uff0ct) shc"
          ],
          [
            66.6665371029355,
            752.026700285134,
            777.0691498091537,
            826.5478612713165,
            "text",
            "To determine $\\hat{k}_{i,j},\\,O_{i,j}(\\tau,\\,k)$ needs to be evaluated for each $ \\lbrace{\\hat{K}} \\rbrace$ and agent densities in all link segments needs to be"
          ]
        ]
      },
      "4.2.3 Redundant Computation and Overhead of": {
        "content": [
          [
            929.2352773789262,
            154.18911249687898,
            1374.7042006181837,
            209.0918850070312,
            "text",
            "Average Number of Agents and Shared States Sent per Message\n"
          ],
          [
            797.2008381394197,
            226.60837515094357,
            1507.5790175972363,
            398.1596362783565,
            "table",
            "8 LPs 16 LPs 32 LPs 48 LPs MA agent 0.34 0.22 0.16 0.15 MA-CR agent 25.3 20.5 14.2 13.7 MA shared state 2.53 1.86 1.53 1.48 MA-CR shared state 5.29 3.41 2.33 1.78"
          ],
          [
            842.9768932545081,
            469.59404870778417,
            1427.7189550405649,
            528.1369460471636,
            "text",
            "erage Lookahead of All LPs Throughout the Simulatio and Without Adaptive Range (Unit=Update Intervals"
          ],
          [
            67.98264948344986,
            865.5698409216533,
            774.6355116395862,
            1181.2446985920285,
            "text",
            "the road network during the simulation to balance the workload of LPs so as to improve the speed-up. The work load of LPs is periodically checked and a repartitioning i performed when workload imbalance exceeds a threshold Due to the change of network partitions,extended layers need to be re-computed by running Algorithm 2. The simu lation was run with 8,16,32, and 48 LPs. For each setting four simulation runs using different seeds for random num- ber generation were performed. Means and standard devia tions of the measurements were collected\n"
          ],
          [
            67.74881581467105,
            1296.7717777871228,
            775.5445623609414,
            1794.2395504117817,
            "text",
            "We investigated whether the average lookahead of the MA synchronization protocol is increased. The optimum look ahead was re-evaluated every 10 minutes of simulation time.(The results using different evaluation periods are presented in Section 4.2.4.) The average lookahead is cal- culated by averaging the lookahead values throughout the simulation for all LPs. Let us denote the MA protocol with computation replication as MA-CR. The average look- ahead values of MA and MA-CR methods,in terms of number of update interval, are shown in Fig.9a. The total number of synchronization messages sent during the simulation is shown in Fig. 9b. For comparison, the result of using global barrier synchronization, denoted as barrier are also shown in the figures. Note that the average obtainable optimum number of extended layers to repli cate (i.e.\uff0c $\\hat{k}\\rangle$ is equal to lookahead minus 1.\n"
          ],
          [
            67.40479134573751,
            1797.403393121338,
            774.3064798528911,
            1857.520163300338,
            "text",
            "lt can be observed from Fig. 9a that the lookahead values of the MA-CR method are larger than those of the MA"
          ],
          [
            163.1534941061833,
            1925.1106947725268,
            683.5700975419551,
            1951.9185419790504,
            "text",
            "Average N Vaillable Extended Layers"
          ],
          [
            65.38768493402479,
            1973.4364311014658,
            774.9961235475032,
            2060.0629674383204,
            "table",
            "8 LPs 16 LPS 32 LPs $48$ LPs layer count 23.6 18.7 16.9 16.0"
          ],
          [
            208.33299206851547,
            2095.4290418585188,
            1363.7844089763516,
            2125.9633924382865,
            "text",
            "zed licensed use limited to SOutheast University. Downloaded on December 21.2022 at 05:11:40 UTC fromEEEXplore,Restriction"
          ]
        ]
      },
      "4.2.4 Frequency of Evaluation": {
        "content": [
          [
            800.443195173892,
            546.8416544173592,
            1501.6247865620826,
            659.8139224534054,
            "table",
            "8 LPs 16 LPs 32 LPs 48 LPs with 3.69\u571f0.03 4.13\u571f0.06 4.56\u58eb0.05 3.74\u58eb0.13 without 3.65\u58eb0.14 4.17\u53410.15 4.59\u58eb0.13 3.59\u571f0.03"
          ],
          [
            798.5057035472109,
            700.3673261756044,
            1505.7692640169935,
            886.1100601571927,
            "text",
            "method. For 32 LPs,there is approximately a threefold increase. Correspondingly, there are much fewer synchroni- zation messages when the MA-CR method is used, com pared to the MA method\uff0cas shown in Fig. 95. This reduction of synchronisation messages comes with an increase of message sizeS, which is shown in Table 3\n"
          ],
          [
            798.4953080958361,
            889.196686147727,
            1505.6974408984042,
            1073.7201313660923,
            "text",
            "To observe whether all available extended layers are rep licated, the average numbers of available extended layers are shown in Table 2. It can be observed that the number of available extended layers decreases as the number of LPs increases. The actual numbers of layers replicated are much smaller than the available numbers of layers\n"
          ],
          [
            799.1148612470881,
            1077.6719114529276,
            1505.4260566147873,
            1168.7934413666262,
            "text",
            "The average numbers of complete agents and shared states sent in a message using MA and MA-CR methods are shown in Table 3\n"
          ],
          [
            799.168256065513,
            1171.5149834411918,
            1506.5171064886204,
            1263.3898053471269,
            "text",
            "It can be observed from Table 3 that the average size o messages has increased using the MA-CR method. This is mainly caused by the replication of external agents\n"
          ]
        ]
      },
      "4.2.5 Weak Scaling Property": {
        "content": [
          [
            798.4435670992209,
            1266.8102200119517,
            1505.5791532623066,
            1423.3696917196223,
            "text",
            "Moreover, we compared the lookahead values obtained with and without using adaptive range. The result is shown in Table 4. It shows that there is no significant difference in the lookahead values with and without adaptive range. The adaptive range does not affect lookahead much\n"
          ],
          [
            798.4946780684801,
            1492.7125933041339,
            1505.5596224142691,
            1585.3283688694248,
            "text",
            "The overall speed-up of the parallel simulation is shown in Fig. 10. The speed-up is measured against the sequential simulation, of which execution time is around 9000 seconds"
          ],
          [
            799.883573374884,
            1587.7128538371485,
            1505.818091137087,
            1649.0753870830365,
            "text",
            "The MA-CR method has the highest speed-up, and the bar rier method has the lowest speed-up. This shows that using"
          ],
          [
            828.5083937763264,
            1692.123258528307,
            1472.8698655116166,
            1996.5236581133372,
            "figure",
            "8\n $-\\pm-{\\cdot}$ MA-CR $\\mathbb{E}$ \n7 MA\n6 barrier\n5 $\\Xi$ \n4 \u5de5\n3\n2\n $\\underline{{\\bigcup}}$ \n0\n $^{\\mathrm{B}}$ LPs 16 ${\\mathsf{L P S}}$ 32 ${\\mathsf{L P S}}$ 48 LPs"
          ],
          [
            801.7605036219651,
            2016.497703120196,
            1386.6607022743895,
            2065.7356589741735,
            "text",
            "Fig.10. Speed-up of the parallel simulation with respect to th simulation\n"
          ],
          [
            98.14351103355403,
            130.71595509767354,
            745.4820195330014,
            449.34284062058407,
            "figure",
            "\u53e3 barrier\n4 $\\implies W\\mathbf{A}$ \n $\\implies W_{\\mathrm{K}}-C_{\\mathrm{R}}$ \n3\n2\n $\\mathbb{Z}1$ \n $\\mathbf{\\partial}$ LPs 16 LPs 32 LPs $48\\ {\\mathrm{LPS}}$  $^{\\mathrm{B}}$ \n(a)\n1EoL07\n"
          ],
          [
            69.51678086168853,
            467.2851870982136,
            775.8539057927601,
            519.0737051489224,
            "text",
            "\u7231 ${}^{3}3.5\\mathrm{e}+07{\\frac{\\lambda}{4}}{\\frac{\\prod^{r}\\!\\!\\!\\!{\\sqrt{\\frac{\\log^{\\prime}\\!\\!{\\mathrm{F}}\\mathrm{A}}{\\mathrm{F}}\\mathrm{R}}}{\\mathrm{P}}}$ "
          ],
          [
            67.96995049455455,
            555.953676671427,
            775.0449506675966,
            644.3975432175596,
            "text",
            "2e+07 1.5e+07 S 1e+07"
          ]
        ]
      }
    }
  },
  "5 RELATED WORK": {
    "content": [
      [
        67.97256904575312,
        734.2251006842403,
        774.7159188809017,
        1685.2680480954318,
        "text",
        "The synchronization issue of parallel discrete-event simula_ tions has been extensively studied in the literature [3], [61 Nevertheless, improving the performance of synchroniza tion protocols usually involves tuning the protocols for the models used in particular simulations. For parallel agent based traffic simulations, there have been many approaches to conduct synchronization. Employing global barriers is the most frequently used approach due to its simplicity. LPs are blocked from executing agent models at the end of update intervals, then they exchange messages with rele vant LPs and proceed to the next update interval simulta neously [4],\uff0c[5]. For parallel simulation using multi threading, all threads access the shared memory directly a barriers instead of communicating with each other by mes sage passing [13]. This simplicity frequently comes at the cost of LPs waiting at global barriers. It does not full exploit the parallelism of the simulation. The work in [71 used a conservative time window synchronization from [21] The synchronization protocol allows LPs to progress asynchronously. LPs analyze their event lists and determine the lower bounds of simulation time for neighboring LPs until which they do not affect the neighboring LPs. LPs col lect the time bounds from  $a l l$ neighboring LPs and take the minimum values as their time windowS. They execute local events within the time windowS\uff0c and then synchronize again. This is inefficient since LPs still need to communicate with all neighbors during synchronization. Communicating to all neighbors is unnecessary. The methods above are con servative approaches, in which no violations of data depen dencies are allowed at any time of the simulation.\n"
      ],
      [
        68.08759333703003,
        1687.4688471537786,
        775.5788200984264,
        2068.1696606950477,
        "text",
        "Another attempt is to use an optimistic approach [221 [23]. LPs are allowed to progress over the synchronization point and violations of data dependencies are examined. If there is a violation, the simulation is rolled-back to the point before the violation happens. However, the disadvantage of this approach is the overhead of state saving and perform ing roll-back operations. Some optimistic simulation frame works use reverse computation to avoid state saving overhead [24]. Our work aims at improving the efficiency of conservative synchronization methods in agent-based traf- fic simulation. In particular, we try to reduce synchroniza tion operations by redundant computation\n"
      ],
      [
        798.6199747589138,
        126.59604479763448,
        1506.241312013511,
        570.5243898400582,
        "text",
        "The idea of reducing communication at the expense of performing some redundant computation has been pre sented in many previous works. Ghost cell expansion is used in [8]for solving partial differential equation (PDEX problems using finite difference method. A similar concep has also been applied in sparse matrix-vector multiplication problems [9]. The computational tasks in those works are organized as regular 2D and 3D grids of cells or meshes They are static and their interactions are predictable. Thus the overhead of computation replication can be analyzed prior to the execution of the program. Dynamic adaptation of redundant computation is not required. Consequently the definition of extended layers based on grids or meshes cannot be used directly in agent-based traffic simulations"
      ],
      [
        798.5571295301481,
        571.1552381778457,
        1506.4478034794554,
        1134.5045606044876,
        "text",
        "Computation replication has also been applied in agent based simulations [10], [11], [12]. However, the simulation space for many of these agent-based applications is a 2D grid. In some cases, agents are not even situated in a spatia environment. For instance, in a social network, agents are represented as vertices of a graph, and interactions of agents are represented as edges. Hence, the definitions of extended layers in those works are not applicable for traffic simula- tion either. The indexing of the positions of agents and their interactions are different in a 2D grid or interaction graph from those in a spatial road network. In addition,the dynamics of the workload in the replicated region during simulation run-time is not considered either in these Works Our work aims at accurately defining extended layers fon agent-based traffic simulation, as well as developing an effective approach to dynamically balance the trade-off between the overhead of redundant computation and the benefit of reducing synchronization operations\n"
      ]
    ]
  },
  "6 CONCLUSION AND FUTURE WORK": {
    "content": [
      [
        797.8417334673577,
        1212.1702805481743,
        1505.4355070251281,
        1525.7984457549915,
        "text",
        "The purpose of this Work is to reduce the total execution time of parallel agent-based road traffic simulation by reducing synchronization overhead. Making agent-based road traffic simulation fast is crucial for real-time decision support systems and studies that require a lot of simulation runs. Computation replication has been applied mainly in applications such as matrix multiplication and solving par- tial differential equations to reduce inter-process communi cation. However, there is little work done for applying thi approach to parallel agent-based road traffic simulation"
      ],
      [
        798.8034702263623,
        1527.4818519404841,
        1505.5150479788288,
        2066.8637584692183,
        "text",
        "In this article, We mainly focused on two problems for effec tively applying the concept of computation replication to agent-based traffic simulation: i) how to determine the redun dant computation required to achieve a certain synchroniza- tion frequency, and ii) how to manage the trade-off between the overhead caused by redundant computation and the bene fit of reduced synchronization. The first problem was solved by analyzing the characteristics of agents and road networks to determine extended layers of partitions in a road network Sensing ranges and movement of agents were considered. The second problem was solved by developing an analytical mode of the total overhead of redundant computation and synchro- nization, and using it to dynamically adjust the number of extended layers to replicate according to traffic conditions. To reduce the overhead of determining the optimum number of extended layers to replicate when traffic condition changes, an adaptive approach was used to limit the search range\n"
      ],
      [
        68.12710294317833,
        128.9131183439899,
        775.5129034863,
        345.6083477810128,
        "text",
        "5.0\nMA-CR\n4.5 MA\n4.0\n $\\scriptstyle\\oplus$ 3.5 $\\otimes{\\mathfrak{c}}$ \n3.0\n"
      ],
      [
        68.79342085935055,
        348.51439287309347,
        775.0548735984545,
        626.8976199411411,
        "text",
        "2.5\n2.0\n12 ${\\mathsf{L P S}}$ 24 LPs 48 LPs 96 LPs\nFig.11. Average speed-up of parallel simulation with MA and MA-CR using different problem sizes and LPs.\nalways outperforms MA and there is no significant drop in performance improvement \uff08that is, the distance between"
      ],
      [
        68.37768155777955,
        700.9652042000316,
        775.6605661478734,
        825.9962315674887,
        "text",
        "E\u53e3VVVni\nThe synchronization issue of parallel discrete-event simula tions has been extensively studied in the literature [3],[6] Nevertheless, improving the performance of synchroniza-"
      ],
      [
        68.53606452858311,
        896.1474982327244,
        776.7485446383457,
        2071.499376356577,
        "list",
        "based traffic simulations, there have been many approaches to conduct synchronization. Employing global barriers is the most frequently used approach due to its simplicity. LP are blocked from executing agent models at the end of update intervals, then they exchange messages with rele vant LPs and proceed to the next update interval simulta neously [4],[5]. For parallel simulation using multi threading, all threads access the shared memory directly a barriers instead of communicating with each other by mes sage passing [13]. This simplicity frequently comes at the cost of LPs waiting at global barriers. It does not fully exploit the parallelism of the simulation. The work in [7 used a conservative time window synchronization from [21]. The synchronization protocol allows LPs to progress asynchronously. LPs analyze their event lists and determine the lower bounds of simulation time for neighboring LPs until which they do not affect the neighboring LPs. LPs col lect the time bounds from  $a l l$ neighboring LPs and take the minimum values as their time windows. They execute local events within the time windowS\uff0cand then Synchronize again. This is inefficient since LPs stil need to communicate with all neighbors during synchronization. Communicating to all neighbors is unnecessary. The methods above are con servative approaches, in which no violations of data depen dencies are allowed at any time of the simulation.\nAnother attempt is to use an optimistic approach [221 123]. LPs are allowed to progress over the synchronization point and violations of data dependencies are examined. If there is a violation, the simulation is rolled-back to the point before the violation happens. However, the disadvantage of this approach is the overhead of state saving and perform- ing roll-back operations. Some optimistic simulation frame works use reverse computation to avoid state saving overhead [24]. Our work aims at improving the efficiency o conservative synchronization methods in agent-based traf fic simulation. In particular, we try to reduce synchroniza ion operations by redundant computation\n"
      ],
      [
        795.0903252500844,
        103.58949700051892,
        1503.034000250719,
        1885.266867757192,
        "list",
        "The idea of reducing communication at the expense o performing some redundant computation has been pre- sented in many previous works. Ghost cell expansion i used in [8] for solving partial differential equation (PDE problems using finite difference method. A similar concep has also been applied in sparse matrix-vector multiplication problems [9]. The computational tasks in those works are organized as regular 2D and 3D grids of cells or meshes They are static and their interactions are predictable. Thus the overhead of computation replication can be analyzed prior to the execution of the program. Dynamic adaptatior of redundant computation is not required. Consequently the definition of extended layers based on grids or meshes cannot be used directly in agent-based traffic simulations. Computation replication has also been applied in agent based simulations [10],[11], [12]. However, the simulation space for many of these agent-based applications is a 2D grid. In some cases, agents are not even situated in a spatia environment. For instance, in a social network, agents are represented as vertices of a graph, and interactions of agents are represented as edges. Hence, the definitions of extended layers in those works are not applicable for traffic simula tion either. The indexing of the positions of agents and their interactions are different in a 2D grid or interaction graph from those in a spatial road network. In addition, the dynamics of the workload in the replicated region during simulation run-time is not considered either in these works Our work aims at accurately defining extended layers for agent-based traffic simulation, as well as developing an effective approach to dynamically balance the trade-of between the overhead of redundant computation and the benefit of reducing synchronization operations.\n6 CoNCLUSION AND FUTURE WORK\nThe purpose of this work is to reduce the total execution time of parallel agent-based road traffic simulation by reducing synchronization overhead. Making agent-based road traffic simulation fast is crucial for real-time decision support systems and studies that require a lot of simulatior runs. Computation replication has been applied mainly in applications such as matrix multiplication and solving par tial differential equations to reduce inter-process communi cation. However, there is little work done for applying thi approach to parallel agent-based road traffic simulation. in this article, we mainly focused on two problems fr effe tively applying the concept of computation replication to agent-based traffic simulation: i) how to determine the redun dant computation required to achieve a certain synchroniza- tion frequency, and ii) how to manage the trade-off between the overhead caused by redundant computation and the bene fit of reduced synchronization. The first problem was solved by analyzing the characteristics of agents and road network to determine extended layers of partitions in a road network Sensing ranges and movement of agents were considered. Th second problem was solved by developing an analytical mode"
      ],
      [
        799.0782409070179,
        123.21327839025867,
        1505.3158018274792,
        925.2008403127322,
        "list",
        "The idea of reducing communication at the expense o performing some redundant computation has been pre sented in many previous works. Ghost cell expansion is used in [8] for solving partial differential equation \uff08PDE problems using finite difference method. A similar concep has also been applied in sparse matrix-vector multiplication problems [91. The computational tasks in those works are organized as regular 2D and 3D grids of cells or meshes They are static and their interactions are predictable. Thus the overhead of computation replication can be analyzed prior to the execution of the program. Dynamic adaptation of redundant computation is not required. Consequently the definition of extended layers based on grids or meshes cannot be used directly in agent-based traffic simulations Computation replication has also been applied in agent based simulations |10|, |11|, |12]. However, the simulation space for many of these agent-based applications is a 2D grid. In some cases, agents are not even situated in a spatial environment. For instance, in a social network, agents are represented as vertices of a graph, and interactions of agents are represented as edges. Hence, the definitions of extended layers in those works are not applicable for traffic simula tion either. The indexing of the positions of agents and their interactions are different in a 2D grid or interaction graph from those in a spatial road network. In addition, the"
      ],
      [
        1017.2222990614961,
        948.2120762677883,
        1503.2206458549476,
        1222.1271517613188,
        "text",
        "e is not considered either in these Works accurately defining extended layers for e simulation, as well as developing an to dynamically balance the trade-of head of redundant computation and the synchronization operations\nI AND FUTUREWORK\n"
      ],
      [
        809.497160800793,
        1248.6751585800225,
        1505.1879062742019,
        1574.6289914914626,
        "text",
        "ime Of parallel agent-based TOaol traffiC Simulation by educing synchronization overhead. Making agent-based oad traffic simulation fast is crucial for real-time decision upport systems and studies that require a lot of simulation uns. Computation replication has been applied mainly in pplications such as matrix multiplication and solving par- ial differential equations to reduce inter-process communi- iation. However, there is little work done for applying this pproach to parallel agent-based road traffic simulation. In this article, we mainly focused on two problems for effec-"
      ],
      [
        807.0357226741401,
        1618.629284182151,
        1504.6925472655105,
        1891.5324529578318,
        "text",
        "lant computation required to achieve a certain synchroniza ion frequency, and ii) how to manage the trade-off between he overhead caused by redundant computation and the bene- it of reduced synchronization. The first problem was solved by analyzing the characteristics of agents and road networks o determine extended layers of partitions in a road network bensing ranges and movement of agents were considered. The second problem was solved by developing an analytical model"
      ],
      [
        796.8920459815375,
        1920.8767672457095,
        1503.6782032222761,
        1971.8022148258685,
        "text",
        "IOIL, dlLC uSlIL ILL Q y ILcLIILILdII MM USL LIte IiuIIiOET extended layers to replicate according to traffic conditions. To"
      ]
    ]
  }
}
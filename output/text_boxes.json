{"0": [["text", "3286", 26.1921, 738.6552378, 41.59234254, 745.6290378], ["text", "IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS, VOL. 28, NO. 11, NOVEMBER 2017", 188.22136920000003, 738.6552378, 540.2776224600009, 745.6290378], ["text", "Reducing Synchronization Overhead with\nComputation Replication in Parallel\nAgent-Based Road Traf\ufb01c Simulation", 66.3874, 639.5871862, 500.03952433999996, 719.2846662000001], ["text", "Yadong Xu , Member, IEEE, Vaisagh Viswanathan, Member, IEEE, and Wentong Cai, Member, IEEE", 37.7008, 613.0580789999999, 528.8029874, 624.017079], ["text", "Abstract\u2014Road traf\ufb01c simulation is a useful tool for studying road traf\ufb01c and evaluating solutions to traf\ufb01c problems. Large-scale\nagent-based road traf\ufb01c simulation is computationally intensive, which triggers the need for conducting parallel simulation. This paper\ndeals with the synchronization problem in parallel agent-based road traf\ufb01c simulation to reduce the overall simulation execution time.\nWe aim to reduce synchronization operations by introducing some redundant computation to the simulation. There is a trade-off\nbetween the bene\ufb01t of reduced synchronization operations and the overhead of redundant computation. The challenge is to minimize\nthe total overhead of redundant computation and synchronization. First, to determine the amount of redundant computation, we\nproposed a way to de\ufb01ne extended layers of partitions in the road network. The sizes of extended layers are determined by the\nbehavior of agents and the topology of road networks. Second, due to the dynamic nature of road traf\ufb01c, a heuristic was proposed to\nadjust the amount of redundant computation according to traf\ufb01c conditions during simulation run-time to minimize the overall simulation\nexecution time. The ef\ufb01ciency of the proposed method was investigated in a parallel agent-based road traf\ufb01c simulator using real-world\nnetwork and trip data. Results have shown that the method can reduce synchronization overhead and improve the overall performance\nof the parallel simulation signi\ufb01cantly.", 50.1165, 470.2762662, 516.4170361, 590.6390368], ["text", "Index Terms\u2014Agent-based traf\ufb01c simulation, parallel simulation, conservative synchronization, computation replication", 50.1165, 447.9389862, 466.0931955799999, 455.9330968], ["text", "\u00c7", 278.9857, 432.2834, 287.4499108, 444.2385], ["text", "1 INTRODUCTION", 26.1921, 398.17396640000004, 115.37678999999999, 409.6310664], ["text", "A GENT-BASED road traf\ufb01c simulation considers the", 26.1921, 365.8641282, 277.23011027999996, 392.5140282], ["text", "behavior of driver-vehicle-units (DVUs) [1]. Large-\nscale agent-based simulation of road traf\ufb01c (e.g., the whole\ncity) is a useful tool to evaluate the impact of individual\nbehaviors on road traf\ufb01c as a whole [2]. It is useful in solv-\ning the severe problems that modern large cities face, such\nas congestion and high emissions. However, such traf\ufb01c\nsimulation usually involves thousands or millions of agents,\nwhich is computationally intensive. Parallel computing\ntechniques can be used to speed-up the simulation.", 26.19201, 279.0928928, 277.2869015399999, 380.1748128], ["text", "To parallelize an agent-based traf\ufb01c simulation, a common\nway is to decompose the road network into multiple spatial\nsubregions (i.e., partitions). Each subregion is executed by\na Logical Process (LP) which is assigned to a physical proc-\nessing unit. To maintain the correctness of the simulation,\nsynchronization of LPs is required for simulation time\nadvancement due to data dependencies between LPs [3].\nIn a distributed memory environment, synchronization is", 26.19201, 187.4187728, 277.3645112599999, 277.0485328], ["text", "(cid:2) Y. Xu is with AIDA, TUMCREATE Ltd., Singapore 138602.", 26.1921, 161.820795, 235.60511672, 169.9982202], ["text", "E-mail: xuya0006@e.ntu.edu.sg.", 38.0414, 152.863085, 142.46138126, 160.833285], ["text", "(cid:2) V. Viswanathan is with RP5, TUMCREATE Ltd., Singapore 138602.", 26.1929, 143.90537500000002, 262.59062286000005, 152.0828002], ["text", "E-mail: vaisagh.viswanathan@tum-create.edu.sg.", 38.04219, 134.947675, 195.99003446, 142.91787499999998], ["text", "(cid:2) W. Cai is with the School of Computer Engineering, Nanyang Technologi-", 26.19369, 125.989965, 277.24782364, 134.1673902], ["text", "cal University, Singapore 639798. E-mail: aswtcai@ntu.edu.sg.", 38.15617, 117.03225499999999, 241.21614347999994, 125.002455], ["text", "Manuscript received 25 Sept. 2016; revised 16 Apr. 2017; accepted 26 May\n2017. Date of publication 9 June 2017; date of current version 11 Oct. 2017.\n(Corresponding author: Yadong Xu.)\nRecommended for acceptance by C. Carothers.\nFor information on obtaining reprints of this article, please send e-mail to:\nreprints@ieee.org, and reference the Digital Object Identi\ufb01er below.\nDigital Object Identi\ufb01er no. 10.1109/TPDS.2017.2714165", 26.19369, 50.246764999999996, 277.29324696000003, 112.019795], ["text", "typically achieved by message-passing. For agent-based traf-\n\ufb01c simulation, global barriers are commonly used [4], [5].\nAgent models are updated with \ufb01xed intervals and global\nbarriers are deployed at the end of update intervals. The limi-\ntation of this synchronization method is that all LPs have to\nwait at global barriers despite some LPs having no depen-\ndencies with other LPs. Another approach for synchroniza-\ntion is to allow LPs to exchange messages and progress\nasynchronously [6], [7]. LPs do not need to synchronize at the\nsame time. The frequencies of synchronization can be differ-\nent for different LP pairs and is determined by a measure\ntermed lookahead. Lookahead of LPi towards LPj (i 6\u00bc j) at\nsimulation time t is a time interval in the simulated future\nwithin which LPi will not have data dependencies with LPj.\nThe larger lookahead values are, the less frequent synchroni-\nzation is performed. However, due to the frequent interaction\nof agents, agent-based simulations generally have small look-\nahead. High synchronization overhead is still an issue for the\nperformance of parallel agent-based traf\ufb01c simulations.", 289.24688, 175.9693528, 540.35071968, 391.62319279999997], ["text", "Computation replication is an effective approach reported\nin the literature to reduce inter-process communication in\nparallel applications [8], [9], [10], [11], [12]. The concept is to\nlet LPs conduct some redundant computation to generate\ndata locally instead of receiving them from synchronization.\nThere is a trade-off between the bene\ufb01t of reduced synchro-\nnization and the overhead of redundant computation: to fur-\nther reduce synchronization operations, more redundant\ncomputation is usually required. This method has been used\nfor solving partial differential equations and matrix multipli-\ncation [8], [9], as well as agent-based simulations [10], [11],", 289.24728, 49.9387428, 540.3317604799998, 174.04803500000003], ["text", "1045-9219 (cid:1) 2017 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission.\nSee ht_tp://www.ieee.org/publications_standards/publications/rights/index.html for more information.", 140.5417, 28.6248937, 426.00078977000004, 41.8643], ["text", "Authorized licensed use limited to: Southeast University. Downloaded on December 21,2022 at 05:11:40 UTC from IEEE Xplore.  Restrictions apply.", 52.65, 7.291, 513.2920000000001, 14.291]], "1": [["text", "XU ET AL.: REDUCING SYNCHRONIZATION OVERHEAD WITH COMPUTATION REPLICATION IN PARALLEL AGENT-BASED ROAD...", 26.192100000000227, 738.655237699, 455.64567780000056, 745.629037699], ["text", "3287", 524.8843537200006, 738.655237699, 540.2845962600007, 745.629037699], ["text", "[12]. However, there is a major difference between the simu-\nlation spaces in those simulations and those in agent-based\nroad traf\ufb01c simulation. The spaces in the existing works are\neither n-dimensional grids where computational tasks are\ndistributed uniformly, or graphs where vertices represent\ncomputational tasks and edges represent the dependencies\nof the tasks. The simulation space in agent-based road traf\ufb01c\nsimulation is a spatial network composed of links and nodes.\nAgents are situated in the spatial network. The distribution\nof agents in the spatial network may not be uniform and it\ndynamically changes since agents move along the links. The\ninteraction of agents depends on the positions of agents and\nis dynamic. The interaction of agents affects how computa-\ntion is replicated. Thus, the existing solutions cannot be\ndirectly applied to agent-based road traf\ufb01c simulation. It is\nnon-trivial to determine how computation can be replicated\nin agent-based road traf\ufb01c simulation. In addition, the trade-\noff between the redundant computation and the bene\ufb01t of\nreduced synchronization operations should be carefully\nstudied in order to gain overall performance improvement.", 26.1921, 496.7348428, 277.33810037999984, 723.8473828], ["text", "We solve two challenges in this paper. The \ufb01rst challenge\nis to limit the amount of redundant computation. We pro-\npose a way to de\ufb01ne extended layers of partitions for agent-\nbased road traf\ufb01c simulation. The sizes of extended layers\nare determined by the behavior of agents and topology of\nroad networks in our representation. The second challenge\nis to deal with the dynamic nature of road traf\ufb01c. A method\nis proposed to adjust the amount of redundant computation\naccording to traf\ufb01c conditions on the road network dynami-\ncally during the simulation. Ef\ufb01ciency of the proposed\nmethods is investigated in a parallel agent-based road traf\ufb01c\nsimulator using real-world network and trip data.", 26.1921, 359.1952728, 277.2775269399999, 494.6904828], ["text", "The remainder of the paper is organized as follows: the\nnext section presents some background information about\nparallel agent-based traf\ufb01c simulation used in this work:\nagent models, partitioning of the simulation, and the synchro-\nnization protocol. Section 3 introduces our proposed adaptive\ncomputation replication method. Extended layers of parti-\ntions on the road network are de\ufb01ned. A heuristic that adjusts\nthe number of extended layers to replicate is developed. Sub-\nsequently, Section 4 presents experiments and results. Sec-\ntion 5 describes related works. Finally, Section 6 provides a\nsummary of this work and recommendations for future work.", 26.1921, 233.16466279999997, 277.35419019999983, 357.20771279999997], ["text", "2 PARALLEL AGENT-BASED SIMULATION OF ROAD", 26.1921, 210.86066639999999, 276.9704466, 222.31776639999998], ["text", "TRAFFIC", 44.5039, 197.8779664, 85.10712649999999, 209.3350664], ["text", "2.1 Simulation Space and Agents\n2.1.1 Simulation Space\nThe simulation space of an agent-based traf\ufb01c simulation is\na road network. It is a spatial network that consists of links\nand nodes. Links represent real-world roads and can have\none or more lanes. Links have speed limits. Nodes contain\nthe connectivity information of links. The traf\ufb01c \ufb02ow on a\nlink is unidirectional from the start node to the end node.", 26.1921, 97.7331528, 277.27563402, 192.7429784], ["text", "2.1.2 Agents\nAgents are situated on roads (i.e., links) of the network. An\nagent in the simulation represents a DVU. The behavior of\nDVUs is often characterized by acceleration models and\nlane-changing models [1], [4], [13]. The models describe the", 26.1921, 26.9807828, 277.2850986199999, 85.6201906], ["text", "Fig. 1. Agent B with front sensing range gf and back sensing range gb in\na road network. Agent C is in the sensing range of agent B; thus, agent\nB subscribes to agent-based state variables of agent C.", 289.2458200000002, 593.1327060990001, 540.3334153800002, 619.129908899], ["text", "movement of DVUs on roads, such as what acceleration a\nDVU should have and which lane to take. The models\nrequire agents to have sensing ranges, which are the areas in\nthe road network within which other agents may affect the\nagent\u2019s behavior. An agent needs to examine the traf\ufb01c\ncondition within its sensing range to make acceleration and\nlane-changing decisions. This is challenging in parallel traf-\n\ufb01c simulation when the sensing range is reaching into other\npartitions as it then potentially requires synchronization\nbetween the responsible LPs.", 289.24741, 466.46286280000004, 540.30728252, 579.0537428], ["text", "2.1.3 Agent State Variables\nAn agent has a state at a certain virtual simulation time. The\nstate contains multiple state variables. Among them, there are\nagent-based and component-based state variables. Agent-based\nstate variables belong to the entire agent and are visible to\nother agents, such as velocity and position. Component-based\nstate variables belong to the models in an agent, such as a\nstate-of-charge variable for a battery model in an electric vehi-\ncle. An agent subscribes to agent-based state variables of the\nagents in its sensing range. States of agents change as the sim-\nulation progresses by executing timestamped events which\ncontain certain update functions. Agent-based state variables\nare updated periodically. The period is referred to as an update\ninterval, denoted as d. The events that change agent-based\nstate variables may have an effect on other LPs, thus they\naffect synchronisation between LPs. Other events that change\ncomponent-based state variables are internal to an LP. An\nillustration of sensing ranges and state subscription is shown\nin Fig. 1.", 289.24625, 234.8706828, 540.3657483000001, 453.95389059999997], ["text", "2.2 Parallelization and Data Dependencies\nWe denote the entire road network as G, and agent popula-\ntion at simulation time t as At. In parallel simulation, the\nroad network is partitioned into I disjoint spatial subre-\ngions, G \u00bc fG0; G1; . . . ; GI(cid:3)1g. The subset of At that resides\nin partition Gi \u00f00 (cid:4) i < I\u00de at simulation time t are denoted\nas At\ni\u00bc0 At\ni. The LP that is responsible\nfor executing the events from agents in partition i is LPi.\nAgents in partition i are local to LPi.", 289.24672, 118.5407294, 540.28510398, 221.8830784], ["text", "i. By de\ufb01nition, At \u00bc [I(cid:3)1", 307.7857, 140.1975894, 415.58278, 154.2534], ["text", "During partitioning, the network is cut on links. The\nlinks that are cut and therefore evenly divided between two\npartitions are named boundary links. A boundary link can be\nincoming to or outgoing from a partition, depending on the\ntraf\ufb01c \ufb02ow on the boundary link. The two partitions that\nshare boundary links are neighboring partitions.", 289.24667, 49.8840028, 540.2904550999999, 116.60943280000001], ["text", "There are data read and write dependencies between neigh-\nboring LPs. First, if there is an agent A in LPi inside the", 289.24667, 26.8683294, 540.3349385800001, 47.962685], ["text", "Authorized licensed use limited to: Southeast University. Downloaded on December 21,2022 at 05:11:40 UTC from IEEE Xplore.  Restrictions apply.", 52.65, 7.291, 513.2920000000001, 14.291]], "2": [["text", "3288", 26.192100000000043, 738.6552378899997, 41.59234254000004, 745.6290378899997], ["text", "IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS, VOL. 28, NO. 11, NOVEMBER 2017", 188.22136920000005, 738.6552378899997, 540.277622460001, 745.6290378899997], ["text", "i . Ct", 449.68817, 690.1753894, 468.0774854, 702.8664294], ["text", "there is a synchronization event. Associated with the syn-\nchronization event, there is a set of LPs that currently have\nappointments with LPi, denoted as Ct\ni may include all,\nnone, or only a subset of the neighboring LPs of LPi. When\nCt\ni is empty, no message-passing occurs for LPi at time t.\nFor each LPj in the set Ct\ni , LPi sends and receives migrating\nagents, shared states and a lookahead. Lookahead is a pre-\ndicted time period from the current time to the time when\nthe next data dependency may happen. After messages are\nreceived, the next appointment is made according to the\nlookahead. An appointment is made by adding the LP to\nthe future Ct\u00feDt\nset, where Dt is the minimum of the two\nlookahead values of LPi and LPj. According to the de\ufb01ni-\ntions of data read and write dependencies, the minimum\nlookahead value between any two LPs is an update interval\n(i.e., d). Lookahead decides the frequency of synchroniza-\ntion. In this work, the lookahead is determined by the num-\nber of replicated extended layers.", 289.24672, 519.6416528, 540.2861404, 723.8474128], ["text", "i", 342.42488, 587.1073494, 344.69728929999997, 593.7324494000001], ["text", "Algorithm 1. Simulation Progression in LPi Using MA\nProtocol", 289.2472, 484.7495568, 540.20655178, 507.43140439999996], ["text", "1: De\ufb01nitions:\n2: Tend simulation ending time\n3: Ct\n4: lt\n5: initialize t   0, C0\n6: while t < Tend do", 293.72493, 415.39990279999995, 414.74476751000003, 479.4657305], ["text", "i LPs having appointments with LPi at simulation time t\ni;j lookahead from LPi to LPj at simulation time t", 307.3322, 436.2064228, 534.4432902, 458.05454219999996], ["text", "i as all neighboring LPs of LPi;", 373.66294, 425.2076128, 496.433575, 436.1144422], ["text", "// synchronization event\nforeach LPj 2 Ct", 312.88777, 393.51650279999996, 436.3402715499999, 414.5629153], ["text", "i do", 377.74453, 392.3828228, 393.5286058, 402.76023050000003], ["text", "7:\n8:", 293.72562, 382.6425434, 300.450615, 402.6081534], ["text", "send migrating agents, shared states, and current look-\nahead (i.e., lt\nprepare to receive a message from LPj;", 321.73214805, 360.6346028, 540.2271396, 391.6088434], ["text", "i;j) to LPj;", 369.6377, 370.4426228, 408.672975, 381.3490422], ["text", "end", 313.22745, 349.91397049999995, 328.7212164, 358.8802705], ["text", "9:\n10:\n11: wait for all message sending and receiving to \ufb01nish;\nupdate the local agent set and proxy agent set;\n12:\nforeach LPj 2 Ct\n13:\nadd LPj to Ct\u00feDt\n14:\n15:", 289.24618, 294.9960234, 518.3943225799999, 369.72602340000003], ["text", ", where Dt \u00bc min\u00f0lt", 387.0424, 305.9376034, 462.5113748, 317.4324], ["text", "i;j; ; lt", 460.2896, 304.67892279999995, 479.8594748, 317.4324], ["text", "i do", 377.74453, 315.6202128, 393.5286058, 325.9980305], ["text", "j;i\u00de;", 477.6377, 304.67892279999995, 490.254075, 315.19979129999996], ["text", "end\n// event for updating agent-based states\nupdate the states of local agents for this update interval;\nt   t \u00fe d;", 312.77424, 262.1148134, 534.2615770599999, 304.1147505], ["text", "i", 372.58574, 304.73534279999996, 374.7384766, 311.0115428], ["text", "16:\n17:\n18: end", 289.24667, 251.1732334, 320.2189564, 282.0226834], ["text", "Another consideration for ef\ufb01cient parallel simulation is\nworkload balance of LPs. Agents should be distributed as\nevenly as possible among LPs. In this work, we focus on\nsynchronization, thus load-balancing will not be discussed.\nMore detail regarding load-balancing in traf\ufb01c simulation,\none can refer to [15].", 289.24718, 169.9598528, 540.27297962, 236.6852828], ["text", "3 ADAPTIVE COMPUTATION REPLICATION", 289.2472, 146.11736639999998, 494.55348245, 157.57446639999998], ["text", "The aim of this work is to reduce synchronization so as to\nreduce simulation execution time. This is achieved by\nincreasing lookahead via copying more information from\nneighboring LPs at each synchronization operation. Interac-\ntions of agents are bounded by their locations on the road\nnetwork; thus, we determine the extra information based on\nagent locations on the road network. Extended layers of par-\ntitions are de\ufb01ned in this section. Then an adaptive method\nthat dynamically adjusts the number of extended layers to\nreplicate is proposed.", 289.2472, 26.979502800000002, 540.2853039400001, 139.5703828], ["text", "Fig. 2. Illustration of boundary cut and buffer regions. gf and gb are front\nand back sensing ranges, respectively.", 26.191690000000044, 604.6982162899997, 277.2864698, 621.7377090899997], ["text", "sensing range of another agent B in LPj, agent B should be\naware of the agent-based state variables of agent A. To achieve\nthis, a proxy agent is created in LPj that mirrors agent A. It pos-\nsesses exactly the same agent-based state variables as agent A.\nHence, the agent-based state variables of agent A should be\nsent by LPi to LPj to keep the state of the proxy agent\nupdated. In this case, there is a data read dependency between\nLPi and LPj. The agent-based state variables of agent A are\nshared states. Second, during the simulation, when an agent on\na boundary link moves beyond the boundary of partition i\nand enters the area of partition j (i 6\u00bc j), the agent migrates\nfrom LPi to LPj. Migrated agents are destroyed in the original\nLP and recreated with all their state variables in the new LP.\nThe migration of agents incurs a data write dependency\nbetween the two LPs. To identify those agents that need to\nshare their states, buffer regions of partitions are de\ufb01ned. They\nare the regions at the boundary of partitions with sizes equal\nto the sensing ranges of agents. If an agent falls inside a buffer\nregion, it is possible that the agent is in the sensing range of\nsome agents in the neighboring LP.", 26.19037, 359.2000628, 277.38463258, 587.0863924], ["text", "To illustrate the concepts above, an example is shown in\nFig. 2. link2 is a boundary link. The left half is part of G1,\nand the right half is part of G2. The direction of traf\ufb01c on\nlink2 is from G1 to G2, thus link2 is an outgoing boundary\nlink of G1, and an incoming boundary link of G2. LP1 and\nLP2 are neighboring LPs. B1;2 is the buffer region for G1 in\nG2, and B2;1 is the buffer region for G2 in G1. Given the traf-\n\ufb01c direction of the link, the lengths of B1;2 and B2;1 are equal\nto the front and back sensing ranges of agents, respectively.\nAgent C in LP2 is in buffer region B1;2. Therefore, there is a\ndata read dependency between LP1 and LP2. LP2 should\nsend the agent-based state variables of agent C to LP1.\nThere is a proxy agent in LP1 mirroring agent C. If agent B\ncontinues moves into G2, LP2 will be responsible for execut-\ning events of agent B. Thus agent B is removed from LP1\nand created anew in LP2. To do so, the complete informa-\ntion about agent B, including all state variables and all\nmodel parameters, is sent from LP1 to LP2. There is a data\nwrite dependency between LP1 and LP2.", 26.19155, 141.55751279999998, 277.2959, 357.2125028], ["text", "2.3 Mutual Appointment Synchronization Protocol\nData dependencies necessitate synchronization of LPs. The\nsynchronization protocol used in this work is the mutual\nappointment (MA) protocol introduced in [14]. The idea of\nthe protocol is that an LP communicates with other LPs by\nmaking appointments individually with them at certain\nmutually agreed simulation times.", 26.1921, 49.8842528, 277.27658047999995, 130.2106784], ["text", "The progression of the simulation in LPi using the MA\nprotocol is shown in Algorithm 1. For each update interval,", 26.19227, 26.9812128, 277.25592424, 48.6159924], ["text", "Authorized licensed use limited to: Southeast University. Downloaded on December 21,2022 at 05:11:40 UTC from IEEE Xplore.  Restrictions apply.", 52.65, 7.291, 513.2920000000001, 14.291]], "3": [["text", "XU ET AL.: REDUCING SYNCHRONIZATION OVERHEAD WITH COMPUTATION REPLICATION IN PARALLEL AGENT-BASED ROAD...", 26.19209999999997, 738.6552377790001, 455.6456778000003, 745.6290377790001], ["text", "3289", 524.8843537200004, 738.6552377790001, 540.2845962600005, 745.6290377790001], ["text", "^k(cid:3)\u00f0m(cid:3)1\u00de\nmth update interval, agents in the extended layer X\ni;j\n^k \u00fe 1\u00deth update\nwill function as proxy agents. In the \u00f0\ninterval, LPi only updates the states of its local agents. After\nthat, another synchronization is required. A similar proce-\ndure is conducted by LPj. The computation of external\nagent states is redundant computation, as they are computed\nby both LPs.", 289.2468, 644.1397628, 540.32925192, 730.31], ["text", "3.1.3 Requirements for Agent Models\nSince the computation of external agents is replicated in\nLPs, agent models should satisfy the following require-\nments: i) given the same input values, models of agents\nalways produce the same agent states, including agent-\nbased and component-based state variables; and ii) the\norder of the agents being updated should not affect the\nresult. Otherwise, replicas may generate different states.\nThis requirement is met for deterministic models. For sto-\nchastic models, this can be achieved by manipulating the\nseeds of the random number generators in the two replicat-\ning LPs to produce the same random number sequence.", 289.2472, 492.7114328, 540.2966614599998, 631.5727906000001], ["text", "3.2 Sizes of Extended Layers\n3.2.1 Representation of Extended Layers\nAs described before, a road network is represented as a col-\nlection of links and nodes, and agents are situated on links.\nSensing ranges of agents usually do not cover entire links,\nthus an extended layer may only cover a portion of links.\nTherefore, we represent an extended layer as a collection of\nlink segments. A link segment is a portion of a link between\ntwo points on the link. A link segment can be uniquely iden-\nti\ufb01ed by specifying the link id that the segment is on and\ndisplacements of the two points. A displacement of a point\non a link is the distance between that point and the start\nnode of the link. Thus, a link segment can be denoted as\nseg\u00f0id;s;e\u00de, where id is the id of the link, s is the starting dis-\nplacement of the segment on the link, e is the ending dis-\nplacement. The length of this segment is je (cid:3) sj.", 289.24713, 292.98405280000003, 540.2995008400001, 479.66567840000005], ["text", "3.2.2 Sizes of Link Segments\nTo determine the sizes of extended layers, we need to ana-\nlyze the behavior of agents and topology of the road net-\nwork, because front and back sensing ranges of agents may\nbe different and road links can have different lengths and\nconnectivity too.", 289.2472, 210.26863279999998, 540.30423314, 280.3602906], ["text", "The agents in the kth extended layer should allow the\nagents in the \u00f0k (cid:3) 1\u00deth layer (or local agents if k\u00bc1) to\nadvance one update interval. Therefore, the kth extended\nlayer must cover the sensing ranges of the agents in the\n\u00f0k (cid:3) 1\u00deth layer (or those in the local area if k\u00bc1). Meanwhile,\nthe movement of agents must also be considered. Different\nsizes of segments depending on the direction of extension of\nextended layers are illustrated in Fig. 4. The direction of\nextension is from the \u00f0k (cid:3) 1\u00deth layer to the kth layer (or\nfrom the local area to the \ufb01rst layer if k\u00bc1). It can be the\nsame as or opposite to the traf\ufb01c direction of a link.\ni;j is in the upstream direction of Xk(cid:3)1", 289.24815, 71.4857894, 540.2928763599999, 209.0003724], ["text", ", i.e., the\ndirection of extension for Xk(cid:3)1\nis opposite to the traf\ufb01c\ni;j\ndirection. The segment of Xk\ni;j consists of two parts: the \ufb01rst\npart of size gb and the second part of size Vl(cid:6)d, where Vl is\nthe speed limit of link l. The second part, which is marked", 289.24714, 26.9812128, 540.28632892, 82.2538828], ["text", "In Fig. 4, Xk", 301.15461, 72.7858528, 351.13300100000004, 84.1768294], ["text", "i;j", 493.05738, 71.4857894, 499.8083569, 78.1108894], ["text", "Fig. 3. Illustration of extended layers and new buffer regions: The view of\nthe network from LP1.", 26.19209999999997, 612.1250161790001, 277.2812956999998, 629.0529261790001], ["text", "3.1 Extended Layers on the Network\nWe \ufb01rst explain the idea with the simplest case, i.e., one\nextended layer. Then the generalized multiple layer case is\ndescribed.", 26.1921, 554.3950528, 277.27468755999996, 600.3648784000001], ["text", "3.1.1 One Extended Layer\nAn extended layer of a partition is de\ufb01ned as the space in the\nroad network immediately next to the boundary of the par-\ntition that is required to calculate the agent states in an LP\nuntil the next synchronization. Buffer regions are shifted\nnext to the extended layer.", 26.1921, 472.6435228, 277.2869908799999, 542.7349906000001], ["text", "When synchronization is conducted, each LP receives\ncomplete agents in its extended layer and shared states in\nbuffer regions from neighboring LPs. Agents in the extended\nlayer still exist in the original LPs, but they are replicated in\nthe receiving LP. They are referred to as external agents of the\nreceiving LP. LPs compute the states of external agents, so as\nto emulate the receive of a synchronization message by pro-\nducing migrated agent and shard states. This way, the syn-\nchronization operation can be skipped.", 26.19115, 371.2776528, 277.3286357799999, 470.7695328], ["text", "1;2. B1", 218.38095, 335.6179894, 243.97394999999997, 349.67379999999997], ["text", "The concepts above are illustrated in Fig. 3. The network\nis the same as that in Fig. 2. Partition G1 has one extended\nlayer in partition G2, which is marked as X1\n1;2 is the\nnew buffer region of G1 inside G2.", 26.19115, 325.4693128, 277.2567033399999, 369.34687279999997], ["text", "Suppose that at simulation time t, complete agents in X1\n1;2\nare replicated to LP1 from LP2. Agent-based state variables\nof agents in B1\n1;2 are send to LP1 by LP2. The agents in X1\n1;2\nare external agents of LP1. States of those agents are\nupdated by LP1 together with local agents at time t. At time\nt \u00fe d, the agents hat fall inside X1\n1;2 will function as proxy\nagents. Due to movement of agents, agents currently in X1\n1;2\nmay be different from those at time t. Then, states of the\nagents currently in G1 can be updated till time t \u00fe 2d using\nthose agents. After that, the next synchronization operation\nis performed. The same procedure also applies to LP2.\nLookahead between the two LPs is 2d.", 26.19164, 190.37046279999998, 277.27005, 326.94], ["text", "3.1.2 Multiple Layers\nMore generally, a partition can have multiple layers of\nextended layers. The \ufb01rst layer is immediately next to the\nboundary of the partition, and other layers expand towards\nneighboring partitions. Buffer regions are shifted next to the\noutermost extended layer.", 26.1921, 108.67502280000001, 277.27752694, 178.7665906], ["text", "Supposing that LPi and LPj use", 38.15441, 97.1108294, 171.44424600000002, 107.4077924], ["text", "^k (cid:5) 1) extended layers\nbetween them, the lookahead between the two LPs will be\n^k \u00fe 1\u00de (cid:6) d. To explain this, we denote the kth extended layer\n\u00f0\nof partition Gi in neighbor Gj as Xk\ni;j. After a synchronization\n^k) update inter-\noperation is performed, in the mth (1 (cid:4) m (cid:4)\nval, LPi updates the states of local agents and external agents\ni;j; X2\nin the extended layers fX1\ng. After the", 26.19058, 25.6212894, 277.30769428, 111.73879000000001], ["text", "^k(cid:3)\u00f0m(cid:3)1\u00de\ni;j", 197.2906, 25.6776494, 225.3531935, 42.8519], ["text", "i;j; . . . ; X", 161.63135, 25.6212894, 197.30480078000002, 39.115], ["text", "^k (", 173.65044, 97.2238828, 183.8883018, 111.73879000000001], ["text", "Authorized licensed use limited to: Southeast University. Downloaded on December 21,2022 at 05:11:40 UTC from IEEE Xplore.  Restrictions apply.", 52.65, 7.291, 513.2920000000001, 14.291]], "4": [["text", "3290", 26.192100000000114, 738.6552387000004, 41.59234254000011, 745.6290387000004], ["text", "IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS, VOL. 28, NO. 11, NOVEMBER 2017", 188.22136920000014, 738.6552387000004, 540.277622460001, 745.6290387000004], ["text", "Fig. 4. Different lengths of link segments in extended layers of Gi\nin\nneighboring partitions Gj and Gq. Xk\ni;q are on link l and m,\nrespectively. The solid arrows indicate the traf\ufb01c directions on links. The\nempty arrows indicate the directions of extension of extended layers.\nThe direction of extension of Xk\ni;j is opposite to the traf\ufb01c direction of link\nl, i.e, extending upstream; the direction of extension of Xk\ni;q is the same\nas the traf\ufb01c direction of link m, i.e., extending downstream.", 26.19117, 611.1046265000002, 277.31974967999986, 675.9849391000002], ["text", "i;j and Xk", 158.34329, 657.3386869000002, 194.807439, 668.0200469000002], ["text", "with a wavy pattern, ensures that after agents in Xk\ni;j are\nupdated, the \ufb01rst part of Xk\ni;j contains all the agents required\nfor the next round of state update for Xk(cid:3)1\n. Its size is the\ni;j\nmaximum distance that agents can travel on link l in one\nupdate interval. In contrast, for Xk(cid:3)1\ni;q , the direction of exten-\nsion is the same as the traf\ufb01c direction, i.e., Xk\ni;q is in the\ndownstream direction of Xk(cid:3)1\ni;q only\nrequires a size of gf , because after an update, Xk\ni;q will still\ncontain all the agents needed to update Xk(cid:3)1\nfor the next\ni;q\nupdate interval.", 26.19182, 485.2298328, 277.26374694, 599.7421294000001], ["text", "i;q . The segment of Xk", 146.21095, 518.2825894, 250.163001, 530.9736294], ["text", "2;1, X1", 77.15895, 403.7061894, 103.77235, 417.762], ["text", "2;1, G2, X1", 100.17625, 403.7061894, 144.25105, 417.762], ["text", "2;3, and X2", 140.65495, 403.7061894, 187.22435, 417.762], ["text", "To explain what happens to the second part of Xk", 38.15478, 473.77766280000003, 242.849601, 485.1657294], ["text", "i;j during\nthe simulation, an example with two extended layers is\ndepicted in Fig. 5. Supposing a synchronization operation is\nperformed at time 0, LP2 receives complete agents in two\nlayers of extended layers and shared states in the buffer\nregions from LP1 and LP3. As shown in Fig. 5a, states of the\nagents in X2\n2;3 (i.e., the dark gray\nregion) are updated by LP2. Fig. 5b shows that at time d, X2\n2;3\nand the \ufb01rst part of X2\n2;1 function as buffer regions. The sec-\nond part of X2\n2;1 (marked with a cross) is dropped since agent\nstates in that region may not be accurate (agents in B2\n2;1 may\nmove into the region). Agents in X1\n2;1, G2, and X1\n2;3 are\nupdated. As the simulation progresses to time 2d as shown\nin Fig. 5c, X1\n2;1 function as buffer\nregions. Similar to the previous update interval, the region\nmarked with a cross in X1\n2;1 is dropped. Agents in G2 will be\nupdated. It can be noticed that we have updated agents in G2\nfor three update intervals with one synchronization.", 26.19164, 279.0379828, 277.32083271999994, 483.24268279999995], ["text", "2;3 and the \ufb01rst part of X1", 79.65345, 323.5423894, 192.15664999999998, 337.59819999999996], ["text", "3.2.3 Segments on Connecting Links\nWhen a link is not long enough to cover an extended layer,\nthe layer will expand to its connecting links. Link segments\non the connecting links may have various sizes depending\non how they connect to the link, and how agents sense the\nconnecting links. In our network representation, there are\nfour basic cases of how a link x can connect to another link\ny: i) they share the same start node; ii) they share the same", 26.1921, 170.07308279999998, 277.27563402, 263.0688906], ["text", "Fig. 5. An example of simulation in LP2 progressing through time using\ntwo extended layers in LP1 and LP3: (a) At time 0, there are two\nextended layers for G2 in G1 and G3. (b) At time d, X2\n2;3, exclud-\ning the crossed region, function as buffer regions. (c) At time 2d, X1\n2;1\nand X1\n2;3, excluding the crossed region, function as buffer regions.", 26.191029899999645, 26.289986900000184, 277.33362141999964, 71.86533910000018], ["text", "2;1 and X2", 208.46009989999965, 44.20498690000018, 242.94054989999964, 56.035600300000176], ["text", "Fig. 6. Four basic cases of extended layer segments on connecting links,\nillustrated by links a, b, c, and d. The kth extended layers of Gi in Gj and\nGq, i.e., Xk\ni;j and Xk\ni;q, have extra segments on link a and link c respec-\ntively (marked by a wavy pattern).", 289.2464300000001, 622.3298271000003, 540.3423444000001, 657.2293271000003], ["text", "end node; iii) the start node of link x is the end node of the\nlink y; and iv) the end node of link x is the start node of link\ny. Sensing ranges of agents can cover connecting links.", 289.24741, 576.9013428000001, 540.2864592, 609.9895924], ["text", "The segment sizes for the four basic cases are illustrated in\nFig. 6. Link a has the start node of link l as its end node. Link b\nand link l share the same start node. Link c and link m share\nthe same end node. Link d has the end node of link m as its\nstart node. Xk\ni;j contains an extra segment on link a, and Xk\ni;q\ncontains an extra segment on link c. The extra segments are\nrequired so that the buffer regions for the next round of state\nupdate will contain all necessary proxy agents, which is for\nsimilar reasons explained in Fig. 4.", 289.2472, 475.5359628, 540.30422846, 575.0841428], ["text", "A real-world road network usually has a large number of\nlinks and very complex connectivity. The four cases\ndescribed above can be arbitrarily combined. Depending on\nthe topology of the road network and sizes of partitions,\none extended layer can contain many segments. A searching\nalgorithm is designed to determine the segments of extended\nlayers in the next section.", 289.2472, 396.7337028, 540.32789464, 473.7755428], ["text", "3.2.4 Searching Algorithm for Determining Extended", 289.2472, 374.2590906, 526.7874643199999, 384.2216906], ["text", "Layers", 323.31929, 361.2768306, 353.16126204, 371.2394306], ["text", "Extended layers of Gi inside Gj are calculated by LPj. A\nsearch is performed by LPj starting from all the boundary\nlinks between Gi and Gj towards the inner area of Gj. The\nsearching algorithm is shown in Algorithm 2.", 289.24683, 313.3372828, 540.3054403399999, 357.31009240000003], ["text", "The algorithm starts with initializing the layer index and\na \ufb02ag that controls the termination of the algorithm. A set\nSadd is used to store the segments in the current layer. A set\nScont is used to store the segments in Sadd from which the\nnext layer continues. Note that some segments in Sadd may\nnot connect\nlayer (a detailed description\nis provided in the appendix, which can be found on the\nComputer\nhttp://doi.\nieeecomputersociety.org/10.1109/TPDS.2017.2714165). A\nset Scheck is used to keep track of all the segments that have\nbeen added to extended layers. Areas occupied by the seg-\nments in Scheck will not be searched again.", 289.24671, 175.8005294, 540.2851034400001, 311.4065028], ["text", "Society Digital", 344.86241606, 221.7207928, 415.99361736000003, 231.18539280000002], ["text", "to the next", 349.05712678, 244.6819128, 402.2831978, 254.1465128], ["text", "Library", 428.65441278000003, 221.7207928, 459.87812818000003, 231.18539280000002], ["text", "at", 472.5909789, 221.7207928, 480.37088009999997, 231.18539280000002], ["text", "The \ufb01rst extended layer is obtained by adding segments\nfrom boundary links (lines 12-17). It is assumed that boundary\nlinks are long enough to accommodate the segments of the\n\ufb01rst layer. Subsequently, the algorithm continues to search for\nsegments for the next layer based on the current layer (while\nloop in lines 18-35). Each iteration of the while loop deter-\nmines one layer of extended layers. In each iteration, seg-\nments in Sadd are added to the current layer. Segments in Scont\nare added to a temporary set Stemp cont. Then, Sadd and Scont\nare emptied and reused to store new segments for the next\nlayer. After that, the algorithm searches for segments in the\nnext layer connecting to the segments in Stemp cont. If s < e,\nthe search continues towards the downstream direction of the", 289.2472, 26.9812128, 540.343398, 173.9260128], ["text", "Authorized licensed use limited to: Southeast University. Downloaded on December 21,2022 at 05:11:40 UTC from IEEE Xplore.  Restrictions apply.", 52.65, 7.291, 513.2920000000001, 14.291]], "5": [["text", "XU ET AL.: REDUCING SYNCHRONIZATION OVERHEAD WITH COMPUTATION REPLICATION IN PARALLEL AGENT-BASED ROAD...", 26.1921, 738.6552378, 455.6456778000003, 745.6290378], ["text", "3291", 524.8843537200004, 738.6552378, 540.2845962600005, 745.6290378], ["text", "link, using function searchDownstream. If e < s, the search\ncontinues towards the upstream direction of the link, using\nfunction searchUpstream. (For more details of functions\nsearchDownstream and searchUpstream one can refer to\nAlgorithms 3 and 4 in the appendix, available in the online\nsupplemental material). In functions searchDownstream and\nsearchUpstream, when the remaining space on a link is not\nenough for a layer, the searching will expand to the connect-\ning links.", 26.1921, 622.7654528, 277.36176187999985, 724.5666924], ["text", "Algorithm 2. Searching for Link Segments of Extended\nLayers of Gi Inside Gj by LPj\n1: De\ufb01nitions:\nindex of the extended layer Xk\n2: k\ni;j\nset of incoming boundary links of Gj from Gi\n3: Ij;i\nset of outgoing boundary links of Gj towards Gi\n4: Oj;i\n5: Sadd\ncandidate segments to be added to an extended layer\n6: Scont\nsegments in Sadd from which the next layer continues\n7: Scheck all segments that are already inside extended layers\n8: Ll\n9: Vl\n10: z\n11: initialize k   1, z   true;\n12: foreach link l 2 Ij;i do\n13:\nLl\n2 ;\n14: end\n15: foreach link l 2 Oj;i do\nput segment seg\n16:\nLl\n17: end", 26.19119, 396.0796434, 277.22471526, 607.927111], ["text", "length of link l\nspeed-limit of the traf\ufb01c on link l\na \ufb02ag that indicates if the searching should continue", 66.78432, 472.8416234, 272.51159034999995, 504.3726422], ["text", "2 (cid:3) gb (cid:3) Vl(cid:6)d\u00de into Sadd, Scont and Scheck;", 128.6362, 402.88540240000003, 268.811575, 416.7254422], ["text", "2 \u00fe gf \u00de into Sadd, Scont and Scheck;", 128.6362, 435.7106024, 251.18007500000002, 449.60734219999995], ["text", "put segment seg", 50.22987367, 439.95972340000003, 114.1165492, 449.6074622], ["text", "Ll\n2 ;", 120.0756, 402.9731, 127.269374, 413.3107024], ["text", "\u00f0l;", 114.1228, 436.8434262, 120.02493820000001, 443.3895028], ["text", "\u00f0l;", 114.1228, 403.9615262, 120.02493820000001, 410.5076028], ["text", "Ll", 127.2756, 439.6000456, 132.26065839999998, 446.1925024], ["text", "// search layer by layer", 41.72568, 386.1512553, 158.65968144999997, 395.1175553], ["text", "18: while z do\n19:\n20:\n21:\n22:\n23:", 26.19119, 319.37414340000004, 83.9282658, 383.8531885], ["text", "foreach seg\u00f0id;s;e\u00de 2 Sadd do\nput seg\u00f0id;s;e\u00de into layer Xk\ni;j;", 50.22932, 350.9966128, 165.34707500000002, 372.9026522], ["text", "end\nStemp cont   Scont;\nSadd   ? , Scont   ? ;\n// search segments for the next layer\nforeach seg\u00f0id;s;e\u00de 2 Stemp cont do", 50.2289, 296.8120262, 231.0549619899999, 350.43285050000003], ["text", "24:\n25:", 26.19115, 286.4922434, 37.399325, 306.45695340000003], ["text", "26:\n27:", 26.19188, 253.61044339999998, 37.400225, 273.5753834], ["text", "28:\n29:\n30:\n31:\n32:\n33:\n34:\n35: end", 26.19103, 155.02178339999998, 57.21890640000001, 240.6935834], ["text", "if z ^ \u00f0s < e\u00de then", 58.73374, 286.64467049999996, 131.8655743, 296.14894849999996], ["text", "// direction of extension is downstream\nsearchDownstream\u00f0id; e; gf \u00de;", 67.23827, 263.7464028, 263.91586126999994, 285.5301553], ["text", "else if z ^ \u00f0e < s\u00de then", 58.73417, 253.7628705, 149.95102430000003, 263.26714849999996], ["text", "// direction of extension is upstream\nsearchUpstream\u00f0id; e; gb \u00fe Vid (cid:6) d\u00de;", 66.89798, 230.8645028, 250.9303908699999, 252.6483553], ["text", "end", 58.73364, 220.9374505, 74.2274064, 229.9037505], ["text", "end\nif Sadd \u00bc ? then\nz   false; // whole Gj has been searched\nend\nk   k \u00fe 1;", 50.2291, 165.9633634, 232.33792112, 218.9056905], ["text", "The searching terminates if the whole area of Gj has been\nsearched (Algorithm 2 line 32) or the extension reaches a\nthird partition. In other words, extended layers of Gi inside\nGj is restricted within Gj only. Otherwise, if they were\nextended to a third partition Gq, LPq would also need to\ncommunicate with LPi for synchronization between LPi\nand LPj. This may introduce extra communication which\nwill downgrade the bene\ufb01t of computation replication.", 26.19194, 50.9056128, 277.28117983999994, 141.2534924], ["text", "Algorithm 2 is executed after partitions are determined.\nIf partitions change dynamically during the simulation,", 26.19213, 27.944492800000003, 277.23780561999996, 48.8612628], ["text", "Notation\njAk\ni;jj\nKi;j\nKm\ni;j", 289.2472, 650.8468283999999, 321.3774502, 694.5143291999999], ["text", "jMi;jj", 289.24862, 631.9682683999999, 307.893838, 640.8802836], ["text", "jSk", 289.24874, 612.4032094, 299.647086, 621.9829684], ["text", "i;jj", 296.39034, 610.9918183999999, 304.889138, 620.5728194], ["text", "Ta", 289.24864, 592.8556836, 298.2594882, 601.0250836], ["text", "bw\n^ki;j", 289.24782, 562.2360683999999, 299.2129534, 581.0688736], ["text", "^km\ni;j\noi;j\u00f0k\u00de", 289.24711, 522.3809683999999, 309.910369, 544.99439], ["text", "oi;j\u00f0t; k\u00de", 289.24846, 492.5037684, 318.698189, 501.366973], ["text", "si;j\u00f0k\u00de", 289.24764, 472.5478684, 309.740269, 481.4597836], ["text", "srl\nGi;j\u00f0k\u00de", 289.24775, 442.6706684, 311.044269, 461.5607836], ["text", "TABLE 1\nNotation Used in the Analysis", 357.10871, 706.6411803, 472.37139313, 725.5851802999999], ["text", "Description", 411.64441856, 686.3449291999999, 453.71682856, 694.5143291999999], ["text", "j;i)", 524.1259, 610.9918183999999, 533.1959102, 620.3032291999999], ["text", "number of agents in extended layer Xk\ni;j\navailable extended layers between Gi and Gj\nadaptive range of extended layers between LPi and LPj in\nthe mth evaluation period\nnumber of migrating agents from LPi to LPj in one\nsynchronization\nnumber of shared states that LPi sends to LPj (i.e., in Bk\nin one synchronization\ncomputational workload of one agent in one update\ninterval in terms of wall-clock time\navailable bandwidth for message-passing\nobtainable optimum number of extended layers to repli-\n^kj;i since MA protocol is\n^ki;j \u00bc\ncate between LPi and LPj (\nused)\n^ki;j for the mth evaluation period\ntotal overhead for LPi, relative to LPj in one synchroniza-\ntion cycle, when k layers are replicated, including redun-\ndant computation and message-passing overhead\ntotal overhead for LPi, relative to LPj during time period\nt when k layers are replicated\noverhead of sending a synchronization message from LPj\nto LPi when k layers are replicated\nsend and receive latency of sending a message\nredundant computation between two consecutive\nsynchronization operations in LPi due to external agents\nfrom LPj, when k layers are replicated", 325.07654, 422.7714684, 534.3273556, 681.7372684], ["text", "extended layers need to be recalculated. The time and space\ncomplexity of Algorithm 2 is O\u00f0jSegj\u00de, where jSegj is the\nnumber of segments in extended layers in the calculating\nLP. This is because the algorithm searches the links within\nthe current partition only once. The time for searching and\nadding segments in the while loop and for loop, and the\nmemory required to store the segments, are both propor-\ntional to the number of segments in the partition.", 289.24649, 313.39210280000003, 540.29689792, 403.0786528], ["text", "3.3 Adaptive Extended Layers\nThe maximum number of extended layers that a partition can\nhave is decided by the road network. However, to reduce the\ntotal execution time of the simulation, it may not be bene\ufb01cial\nto replicate all available extended layers due to redundant\ncomputation and extra data in messages. This section introdu-\nces a method to determine the suitable number of extended\nlayers to replicate using run-time traf\ufb01c information. We start\nwith analyzing the overhead of computation replication. The\nnotation used in this section is listed in Table 1.", 289.2472, 188.72456279999997, 540.36386012, 303.46417840000004], ["text", "3.3.1 Analysis of Overhead\nHere, we formulate the total overhead incurred for a pair of\nLPs when a certain number of extended layers is replicated.\nThe MA protocol introduced in Section 2.3 is used for syn-\nchronization between LPs. Therefore,\nthe number of\nextended layers replicated for Gi inside Gj and for Gj inside\nGi will always be equal.", 289.24694, 95.5801294, 540.30328668, 177.29259059999998], ["text", "Considering a pair of neighboring partitions Gi and Gj,\nthere are Ki;j available extended layers between the two.\nLet a unit of computation be the wall-clock time required\nfor processing the events from one agent during one update\ninterval. If k \u00f01 (cid:4) k (cid:4) Ki;j\u00de layers are replicated, the total\nunits of redundant computation in LPi between two", 289.24723, 26.8683294, 540.2909267, 94.42509240000001], ["text", "Authorized licensed use limited to: Southeast University. Downloaded on December 21,2022 at 05:11:40 UTC from IEEE Xplore.  Restrictions apply.", 52.65, 7.291, 513.2920000000001, 14.291]], "6": [["text", "3292", 26.192099999999602, 738.6552376999995, 41.5923425399996, 745.6290376999995], ["text", "IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS, VOL. 28, NO. 11, NOVEMBER 2017", 188.22136919999963, 738.6552376999995, 540.2776224600005, 745.6290376999995], ["text", "consecutive synchronization operations is", 26.1921, 714.3827828, 200.85372132, 723.8473828], ["text", "(cid:3)\ni;jj (cid:6) \u00f0k \u00fe 1 (cid:3) x\u00de", 131.9811, 683.2023594, 199.3323278, 707.12778], ["text", "jAx", 122.34321, 684.8742346, 135.7044062, 696.4035294], ["text", ";", 199.33233, 685.2815924, 201.887772, 694.7461924], ["text", "Xk", 101.53694, 696.18898, 115.1375702, 705.65358], ["text", "(cid:2)", 116.7307, 697.6628, 122.3432078, 707.1274], ["text", "x\u00bc1", 102.27402, 675.3203701, 114.43108000000001, 683.59512], ["text", "(1)", 266.23002, 684.5622828, 277.26195179999996, 696.6959], ["text", "i;jj is the number of agents in layer Xx\nwhere jAx\ni;j. It can be\nestimated using the sizes of the segments in the extended\nlayer and agent densities on the segments.", 26.19167, 633.6516528, 277.29113226, 667.9436294000001], ["text", "Therefore, the redundant computation in terms of wall-\nclock time in LPi, relative to LPj between two consecutive\nsynchronization operations is", 26.19173, 599.2960128, 277.2428599799999, 631.6640828000001], ["text", "Gi;j\u00f0k\u00de \u00bc Ta (cid:6)", 74.09681, 569.3060293999999, 126.938482, 581.55273], ["text", "(cid:3)\ni;jj (cid:6) \u00f0k \u00fe 1 (cid:3) x\u00de", 159.4771, 568.0590593999999, 226.8283278, 592.04042], ["text", "jAx", 149.78251, 569.7317946000001, 163.2004062, 581.2602294000001], ["text", ";", 226.82833, 570.1383924, 229.383772, 579.6029924000001], ["text", "Xk", 129.03205, 581.0454, 142.6326802, 590.51], ["text", "(cid:2)", 144.17, 582.5762, 149.7825078, 592.0408], ["text", "x\u00bc1", 129.77012, 560.2340501, 141.87019999999998, 568.5088], ["text", "(2)", 266.22946, 569.4190828000001, 277.2614018, 581.5527000000001], ["text", "Fig. 7. Heat map of the dynamic traf\ufb01c densities on main roads in a simu-\nlation of Singapore city traf\ufb01c from 5 am to 12 am.", 289.2471999999996, 570.5125260999995, 540.3005297999996, 587.4970260999994], ["text", "where Ta is a unit of computation, i.e., the wall-clock time\nfor computing the events of an agent in one update interval.\nFrom Equation (2), we can derive the difference quotient of\nGi;j between k \u00fe 1 and k as", 26.19112, 506.9437294, 277.2765469399999, 551.5962924], ["text", "DGi;j\u00f0k \u00fe 1; k\u00de \u00bc Ta (cid:6)", 89.91527, 481.0918294, 174.278382, 493.33889], ["text", "Xk\u00fe1", 176.37195, 492.8312, 189.9725802, 502.29580000000004], ["text", "x\u00bc1", 177.1091, 472.0199501, 189.20917999999998, 480.2947], ["text", "jAx", 191.5086, 481.5172146, 204.9264062, 493.0460294], ["text", "i;jj:", 201.2031, 479.8448594, 213.566902, 491.3887924], ["text", "(3)", 266.23077, 481.2048828, 277.2627118, 493.3385], ["text", "i;jj (cid:5) 0; therefore, DGi;j\u00f0k \u00fe 1; k\u00de (cid:5) 0. This\nIt is known that jAx\nequation shows that if extended layers are not empty (i.e.,\ni;jj > 0), the redundant computation increases with an\njAx\nincreasing k and the increase becomes faster as k increases.", 26.19214, 418.8425128, 277.27194997999993, 465.3322], ["text", "The total overhead for LPi, relative to LPj, in one syn-", 38.15451, 407.2776294, 277.2486495, 417.5746924], ["text", "chronization cycle using k extended layers is", 26.19162, 395.9386128, 212.24956154000003, 406.1225224], ["text", "oi;j\u00f0k\u00de \u00bc Gi;j\u00f0k\u00de \u00fe si;j\u00f0k\u00de;", 102.0466, 375.1895294, 201.434512, 387.43620000000004], ["text", "(4)", 266.23011, 375.30258280000004, 277.2620518, 387.43620000000004], ["text", "where si;j\u00f0k\u00de is the overhead for sending one messages from\nLPj to LPi during synchronization when k extended layers\nare replicated. It is the time that LPi needs to wait for the\nmessage from LPj to arrive before progressing.", 26.19167, 321.33122940000004, 277.26152973999996, 365.9840924], ["text", "Based on the fact that the time for message-passing gen-\nerally involves the actual message transmission time and\ncertain latencies on the sending and receiving ends, we use\nthe following model to express the message-passing time", 26.19194, 275.6356228, 277.2868315399999, 319.4567128], ["text", "time \u00bc", 66.8405, 249.4726246, 96.011342, 259.3442024], ["text", "data volume\nbandwidth", 98.6456, 243.41739239999998, 149.83230239999997, 265.8077924], ["text", "\u00fe send recv latency;", 151.93723, 249.4737846, 236.57646920000002, 259.3453624], ["text", "(5)", 266.23001, 249.1608828, 277.2619418, 261.2945], ["text", "where the \ufb01rst item is transmission time and the second\nitem is latency. Note that bandwidth and latency may not\nbe constants, i.e., they may vary with different message\nsizes.", 26.19166, 191.4467028, 277.2751940199999, 235.2677928], ["text", "We conducted an experiment to pro\ufb01le message-passing\noverhead for MPI in the cluster used for our experimenta-\ntion to validate this simple model. Results show that a linear\nregression \ufb01ts quite well to the MPI message passing over-\nhead. However, as indicated in the existing literature (e.g.,\n[16] and [17]), it is not straightforward (may be even impos-\nsible) to de\ufb01ne an accurate cost model for message-passing\nthat can be universally applied. Hence, the model should be\nadapted according to the speci\ufb01c experimentation set-up.", 26.19166, 88.3204128, 277.30642925999996, 189.4591328], ["text", "Based on Equation (5), si;j\u00f0k\u00de can be expressed as", 38.15397, 76.7580294, 241.95163446, 87.0550924], ["text", "si;j\u00f0k\u00de \u00bc", 41.10241, 46.7675294, 74.69560693999999, 57.0646124], ["text", "Da\nbw", 77.3291, 41.136892399999994, 88.597752, 63.5274924], ["text", "(cid:6)", 91.16177, 47.193294599999994, 93.717212, 56.6578946], ["text", "Xk", 103.23765, 58.50727, 116.8382802, 67.97187], ["text", "x\u00bc1", 103.97482, 37.6955501, 116.0749, 45.970299999999995], ["text", "jAx", 118.3748, 47.192914599999995, 131.7926062, 58.7217294], ["text", "i;jj \u00fe jMj;ij", 128.0693, 45.5768694, 170.876642, 57.0644924], ["text", "!", 170.92963968, 65.76341, 178.32149228, 75.22801], ["text", "\u00fe", 180.39708, 47.192914599999995, 187.684822, 56.6575146], ["text", "Ds\nbw", 189.8078, 41.136892399999994, 200.833621, 63.5274924], ["text", "(cid:6) jSk", 203.18747, 47.193294599999994, 219.889001, 58.7217294], ["text", "j;ij \u00fe srl;", 216.17033, 45.5768694, 251.36146359999998, 57.0644924], ["text", "(6)", 266.22941, 46.8805828, 277.26134179999997, 59.0142], ["text", "where Da and Ds are the data sizes of a complete agent and\nthe shared state of an agent respectively, Mj;i is the set of\nmigrating agents from LPj to LPi at the time of synchroniza-\ntion, Sk\nj;i is the set of shared states that LPj sends to LPi dur-\ning the synchronization, bw is the available bandwidth for\nmessage-passing, and srl is a send and receive latency for the\nmessage. Values of bw and srl should be calibrated according\nto the actual simulation environment. They are not necessar-\nily constants and can be different for different LP pairs. In\ngeneral, message-passing time increases as the message size\nincreases. So, this equation shows that as the number of repli-\ncated extended layers increases, the overhead of passing one\nsynchronization message increases as well.", 289.24637, 405.06440280000004, 540.3329116000001, 552.7304924], ["text", "In order to compare the overhead of synchronization\nusing different numbers of extended layers, we de\ufb01ne the\ntotal overhead for LPi, relative to LPj, during a simulation\nperiod t, t (cid:7) d, with k extended layers, as follows:", 289.24675, 359.2014328, 540.2865374799998, 403.0768328], ["text", "oi;j\u00f0t; k\u00de \u00bc", 355.23867, 334.1438294, 399.20470694, 344.450257], ["text", "t\n\u00f0k \u00fe 1\u00de (cid:6) d", 401.83955, 328.0497146, 441.0315142, 350.856557], ["text", "(cid:6) oi;j\u00f0k\u00de:", 443.11277, 334.1438294, 474.24071200000003, 344.4414524], ["text", "(7)", 529.22815, 334.2568828, 540.2600818000001, 346.39050000000003], ["text", "Equation (7) shows that as the number of replicated\nextended layers (i.e., k) increases, the number of synchroni-\nzation operations during period t (i.e., the \ufb01rst term of the\nright-hand side of Equation (7)) decreases; however the total\noverhead per synchronization cycle (i.e., the second term of\nthe right-hand side of Equation (7)) increases. The optimum\nk should give the best trade-off between the bene\ufb01t of reduc-\ning the synchronization frequency and the total overhead\ncaused by redundant computation. It can be noticed from\nEquations (2) and (6) that the total overhead is in\ufb02uenced by\nmany factors,\nincluding the numbers of agents in the\nextended layers, time to compute agent states for one update\ninterval, data sizes of complete agents and shared states,\nmessage-passing bandwidth, and send and receive latency.\nObviously, oi;j\u00f0t; k\u00de is not guaranteed to be a simple convex\nor concave function, thus the optimum k cannot always be\ndetermined mathematically using Equation (7). A naive way\nis to traverse all possible k values and pick the optimum.", 289.24612, 112.6437828, 540.3528390599998, 316.90543279999997], ["text", "3.3.2 Dynamic Determination of the Optimum Number", 289.2472, 88.5835906, 533.7891795999998, 98.5461906], ["text", "of Extended Layers to Replicate", 323.31929, 75.6581106, 462.67215376000007, 85.62071060000001], ["text", "Traf\ufb01c density and \ufb02ow on the roads often change through-\nout the simulation. To give an example, the traf\ufb01c densities\non main roads in our simulation of Singapore city traf\ufb01c are\nshown in Fig. 7.", 289.2472, 26.9807828, 540.2474455399998, 70.8018828], ["text", "Authorized licensed use limited to: Southeast University. Downloaded on December 21,2022 at 05:11:40 UTC from IEEE Xplore.  Restrictions apply.", 52.65, 7.291, 513.2920000000001, 14.291], ["text", "", 95.86779, 65.76341, 103.2596426, 75.22801]], "7": [["text", "XU ET AL.: REDUCING SYNCHRONIZATION OVERHEAD WITH COMPUTATION REPLICATION IN PARALLEL AGENT-BASED ROAD...", 26.1921, 738.6552378, 455.6456778000003, 745.6290378], ["text", "3293", 524.8843537200004, 738.6552378, 540.2845962600005, 745.6290378], ["text", "The heat map in Fig. 7 shows that at a certain time of the\nday, different roads can have different traf\ufb01c densities. Traf-\n\ufb01c density on the same link also changes throughout the\nsimulation. Due to computation overhead, it is impractical\nto recompute the optimum number of extended layers to\nreplicate whenever traf\ufb01c condition changes. Hence, in this\nsection, we propose a heuristic that periodically adjusts the\nnumber of extended layers for computation replication. We\ndenote the obtainable optimum number of extended layers\nto replicate as", 26.19199, 611.2565028, 277.2774169399999, 723.8473828], ["text", "^ki;j.", 86.05937, 611.1453293999999, 100.50155000000001, 625.8282], ["text", "To determine", 38.15447, 485.2293928, 94.60702316000001, 494.6939928], ["text", "Suppose that the simulation time from the start to the\nend can be segmented into M (M (cid:5) 1) periods, and in each\nperiod the traf\ufb01c \ufb02ow and density of links have no or only\nmarginal changes. Denote the mth (1 (cid:4) m (cid:4) M) period as\n^ki;j is only required at the beginning of\ntm. Reevaluation of\neach period. So, lookahead remains constant during the\nperiod. Obviously, the smaller the period is, the more accu-\n^ki;j can be determined, but the more frequent reevalu-\nrately\nation will be required. The size of a period (i.e., t) should be\nmuch larger than one update interval (i.e., d).", 26.19207, 496.73835280000003, 277.29084144, 609.2708128], ["text", "^ki;j, oi;j\u00f0t; k\u00de needs to be evaluated for each\nk and agent densities in all link segments needs to be\nobtained. In cases when there are a large number of avail-\n^ki;j may\nable extended layers, the overhead of determining\nbecome signi\ufb01cant. To reduce the overhead of reevaluating\n^ki;j, the following method is proposed to limit the range of\nk. In consecutive periods tm(cid:3)1 and tm, the obtainable opti-\nmum lookahead may not vary much, thus it is very likely\nthat the obtainable optimum lookahead in tm has a similar\nvalue to that of tm(cid:3)1. Thus, the lookahead in period tm(cid:3)1\ncan be utilized to limit the range of k to be evaluated in\nperiod tm. An adaptive range in time period tm, denoted as\nKm\ni;j, determines the number of extended layers between\nLPi and LPj to be evaluated", 26.19115, 334.7107294, 277.27847357999997, 499.8011], ["text", "(", 88.15783, 322.80924, 95.7484392, 332.27384], ["text", "Km", 60.37755, 304.6460024, 74.6221625, 315.7673294], ["text", "i;j \u00bc", 68.37138, 302.6224694, 85.52394199999999, 313.7031146], ["text", "Ki;j;\nmin\u00f0Ki;j; 2 (cid:6)", 97.34144, 296.8966294, 146.895682, 322.6140924], ["text", "if m \u00bc 1\n^km(cid:3)1\ni;j \u00fe 1\u00de; otherwise", 148.98925, 295.7062894, 238.92132740000002, 324.5638], ["text", ";", 240.5483, 304.6457224, 243.103742, 314.11032240000003], ["text", "^km(cid:3)1", 55.10555, 274.0315224, 74.17897, 287.88392000000005], ["text", "i;j", 59.9244, 272.0085894, 66.6753769, 278.6336894], ["text", "is the obtainable optimum k value between LPi\nwhere\nand LPj in period tm(cid:3)1. The adaptive range limits the search\nrange in period tm, such that the resultant lookahead is at\nmost twice of that in tm(cid:3)1. Meanwhile,\nit ensures that\nthe lookahead is able to grow exponentially if necessary. In\nthe \ufb01rst period (i.e., t1), the entire range of \u00bd0; Ki;j(cid:8)\nis\nsearched. In period tm (m > 1), the search range of k is\n^km(cid:3)1\n\u00bd0; min\u00f0Ki;j; 2 (cid:6)\ni;j \u00fe 1\u00de(cid:8). k \u00bc 0 here refers to the case where\nthere are no extended layers. When k \u00bc 0, oi;j\u00f00\u00de \u00bc si;j\u00f00\u00de.\nBased on Equation (6), si;j\u00f00\u00de can be derived as follows:", 26.19174, 156.63832939999998, 277.31934171999995, 283.4958924], ["text", "si;j\u00f00\u00de \u00bc", 79.48354, 131.41002939999998, 112.96407694, 143.6567], ["text", "Da\nb", 115.5968, 125.7226924, 126.808852, 148.1132924], ["text", "(cid:6) jMj;ij \u00fe", 129.42958, 131.41002939999998, 165.00755352, 141.7074524], ["text", "Ds\nb", 167.1307, 125.7226924, 177.9318958, 148.1132924], ["text", "(cid:6) jSj;ij \u00fe C;", 180.51038, 131.41002939999998, 224.00893879999998, 141.7074524], ["text", "(8)", 266.22958, 131.5230828, 277.2615118, 143.6567], ["text", "where jSj;ij is the number of shared states LPj sends to LPi\nduring synchronization when there are no extended layers.\nTo determine the obtainable optimum number of\n^km\ni;j), the adaptive range is\nextended layers to replicate (i.e.,\n\ufb01rst determined. Then, for each value k in the adaptive\nthe overhead is calculated as the larger value\nrange,\n^km\nbetween oi;j\u00f0tm; k\u00de and oj;i\u00f0tm; k\u00de.\ni;j will be the value that\ngives the minimum overhead in the range.", 26.19123, 26.9812128, 277.27847546000004, 119.20017240000001], ["text", "Fig. 8. Singapore city road network partitioned using METIS.", 289.2472, 620.7992262, 498.3071400399999, 628.7694262], ["text", "3.4 Overall Execution of the Simulation\nWhen computation replication is incorporated to the MA\nsynchronization protocol, the execution of the simulation\nshown in Algorithm 1 needs to be slightly altered. The \ufb01rst\nchange is that lookahead is determined at the beginning of\n^ki;j) and is kept\neach evaluation period (by determining\n\ufb01xed during the period, instead of being determined in syn-\nchronization operations. The second change is that external\nagents are sent between LPs during synchronization and\ntheir states are updated by the corresponding LPs.", 289.2469, 497.0781228, 540.30204022, 611.8168784000001], ["text", "The effectiveness of the proposed method of dynamically\ndetermining the number of extended layers to be replicated\nhas been investigated in experiments and the results will be\npresented in the next section.", 289.2469, 451.2694528, 540.29162882, 495.09055279999995], ["text", "Implementation and Hardware", 323.319292, 399.37363059999996, 455.69534698, 409.33623059999996], ["text", "4 EXPERIMENTS AND RESULTS\n4.1 Set-Up\n4.1.1\nThe proposed heuristics were experimented with SEMSim\nTraf\ufb01c simulator [18]. It is implemented using C++. Commu-\nnication between LPs is realized using OpenMPI 1.8.1.\nThe experiments were run on a cluster composed of three\ncompute nodes. The hardware of each compute node is:\nOctacore Intel\u00f0R\u00de Xeon\u00f0R\u00de=2:6 GHz (cid:9) 2 CPUs, 192 GB memory.\nCompute nodes are connected via 56 Gbps In\ufb01niBand. Differ-\nent LPs are mapped to different CPU cores.", 289.2472, 304.8895528, 540.3619672000001, 439.4515664], ["text", "4.1.2 Workload\nExperiments used a real-world road network. It is the road\nnetwork of Singapore city consisting of approximately\n80,000 links and 40,000 nodes in our representation.\nAgents move on the road network according to their trips\nderived from the data of the Household Interview and\nTravel Survey (HITS) in 2008. In every update interval,\nagent states are updated by the Intelligent Driver Model\n[19] and a rule-based lane-changing model. They form the\nmajor computational workload of the simulation. The\ncomputation time for models in an agent in one update\ninterval is around 2 ms. The data size of migrated agents\nand shared states are around 200 and 100 bytes, respec-\ntively. The update interval (i.e., d) is 0.5 seconds; and the\nfront and back sensing ranges of agents are 40 and 20\nmeters respectively. The road network is initially parti-\ntioned using METIS [20]. An example of the road network\nin four partitions is shown in Fig. 8. Different intensities of\ngray represent different partitions.", 289.2472, 72.7856828, 540.3146432800002, 291.8688906], ["text", "The traf\ufb01c of 19 hours from 5 am to the midnight of the\nsame day was simulated. To reduce the in\ufb02uence of work-\nload imbalance of LPs, dynamic load-balancing described\nin [15] was employed. Dynamic load-balancing repartitions", 289.2472, 26.9770228, 540.28530394, 70.7981228], ["text", "Authorized licensed use limited to: Southeast University. Downloaded on December 21,2022 at 05:11:40 UTC from IEEE Xplore.  Restrictions apply.", 52.65, 7.291, 513.2920000000001, 14.291]], "8": [["text", "3294", 26.192099880000075, 738.6552378000002, 41.59234242000007, 745.6290378000002], ["text", "IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS, VOL. 28, NO. 11, NOVEMBER 2017", 188.2213690800001, 738.6552378000002, 540.277622340001, 745.6290378000002], ["text", "TABLE 3\nAverage Number of Agents and Shared\nStates Sent per Message", 337.43574967999996, 696.6634803000003, 492.0461437299999, 725.5851803000002], ["text", "8 LPs", 387.55287967999993, 676.1996934000002, 408.9357119199999, 685.1659934000003], ["text", "16 LPs", 426.84051638999995, 676.1996934000002, 452.70201547999994, 685.1659934000003], ["text", "32 LPs", 470.60681994999993, 676.1996934000002, 496.4683190399999, 685.1659934000003], ["text", "48 LPs", 514.4305078299999, 676.1996934000002, 540.29200692, 685.1659934000003], ["text", "MA agent\nMA-CR agent\nMA shared state\nMA-CR shared state", 289.24726967999993, 631.8658234000002, 369.59159408999994, 670.7087334000003], ["text", "0.34\n25.3\n2.53\n5.29", 390.3853404199999, 631.8658234000002, 406.07815868, 670.7087334000003], ["text", "0.22\n20.5\n1.86\n3.41", 431.94055439999994, 631.8658234000002, 447.63337265999996, 670.7087334000003], ["text", "0.16\n14.2\n1.53\n2.33", 475.70685796, 631.8658234000002, 491.39967621999995, 670.7087334000003], ["text", "0.15\n13.7\n1.48\n1.78", 516.5250420799999, 631.8658234000002, 532.21786034, 670.7087334000003], ["text", "TABLE 4\nAverage Lookahead of All LPs Throughout the Simulation with\nand Without Adaptive Range (Unit=Update Intervals)", 293.27223968, 582.0871803000002, 536.1818594999999, 611.0088803000002], ["text", "8 LPs", 343.6727096799999, 561.6233934000002, 365.0555419199999, 570.5896934000002], ["text", "16 LPs", 394.29912936999995, 561.6233934000002, 420.1606284599999, 570.5896934000002], ["text", "32 LPs", 448.2708755899999, 561.6233934000002, 474.1323746799999, 570.5896934000002], ["text", "48 LPs", 505.1907412499999, 561.6233934000002, 531.10872803, 570.5896934000002], ["text", "with\nwithout", 289.24726967999993, 537.1893334000002, 320.59434447999996, 556.1333334000002], ["text", "3.69(cid:10)0.03\n3.65(cid:10)0.14", 335.22465618999996, 537.1893334000002, 373.4811746799999, 556.4292213000002], ["text", "4.13(cid:10)0.06\n4.17(cid:10)0.15", 388.0630649999999, 537.1893334000002, 426.37606467999996, 556.4292213000002], ["text", "4.56(cid:10) 0.05\n4.59(cid:10) 0.13", 440.9579549999999, 537.1893334000002, 481.4255646799999, 556.4292213000002], ["text", "3.74(cid:10)0.13\n3.59(cid:10)0.03", 496.0074549999999, 537.1893334000002, 534.32045468, 556.4292213000002], ["text", "method. For 32 LPs, there is approximately a threefold\nincrease. Correspondingly, there are much fewer synchroni-\nzation messages when the MA-CR method is used, com-\npared to the MA method, as shown in Fig. 9b. This\nreduction of synchronisation messages comes with an\nincrease of message sizes, which is shown in Table 3.", 289.24741, 451.89757280000003, 540.2694241199999, 517.6576128], ["text", "To observe whether all available extended layers are rep-\nlicated, the average numbers of available extended layers\nare shown in Table 2. It can be observed that the number of\navailable extended layers decreases as the number of LPs\nincreases. The actual numbers of layers replicated are much\nsmaller than the available numbers of layers.", 289.24741, 384.3203328, 540.30065696, 450.08037279999996], ["text", "The average numbers of complete agents and shared\nstates sent in a message using MA and MA-CR methods are\nshown in Table 3.", 289.24741, 350.0206228, 540.25428042, 382.3895528], ["text", "It can be observed from Table 3 that the average size of\nmessages has increased using the MA-CR method. This is\nmainly caused by the replication of external agents.", 289.24741, 316.1752128, 540.2760490000001, 348.14663279999996], ["text", "Moreover, we compared the lookahead values obtained\nwith and without using adaptive range. The result is shown\nin Table 4. It shows that there is no signi\ufb01cant difference in\nthe lookahead values with and without adaptive range. The\nadaptive range does not affect lookahead much.", 289.24741, 258.97117280000003, 540.3006572999999, 314.24443279999997], ["text", "4.2.2 Overall Speed-Up\nThe overall speed-up of the parallel simulation is shown in\nFig. 10. The speed-up is measured against the sequential\nsimulation, of which execution time is around 9000 seconds.\nThe MA-CR method has the highest speed-up, and the bar-\nrier method has the lowest speed-up. This shows that using", 289.2472, 177.38682279999998, 540.2900362399998, 247.47839059999998], ["text", "Fig. 10. Speed-up of the parallel simulation with respect to the sequential\nsimulation.", 289.2471998800001, 27.90471620000024, 540.2535055, 44.83262620000024], ["text", "Fig. 9. (a) Average lookahead of all LPs throughout the simulation (larger\nlookahead means less frequent synchronization). (b) Total number of\nmessages sent during the simulation (the smaller the better).", 26.192099679999945, 473.9642062000002, 277.3275225399998, 499.8498262000002], ["text", "the road network during the simulation to balance the\nworkload of LPs so as to improve the speed-up. The work-\nload of LPs is periodically checked and a repartitioning is\nperformed when workload imbalance exceeds a threshold.\nDue to the change of network partitions, extended layers\nneed to be re-computed by running Algorithm 2. The simu-\nlation was run with 8, 16, 32, and 48 LPs. For each setting,\nfour simulation runs using different seeds for random num-\nber generation were performed. Means and standard devia-\ntions of the measurements were collected.", 26.1921, 345.76370280000003, 277.27941985999996, 458.3545828], ["text", "4.2 Results\nLookahead and Synchronization Messages\n4.2.1\nWe investigated whether the average lookahead of the MA\nsynchronization protocol is increased. The optimum look-\nahead was re-evaluated every 10 minutes of simulation\ntime. (The results using different evaluation periods are\npresented in Section 4.2.4.) The average lookahead is cal-\nculated by averaging the lookahead values throughout the\nsimulation for all LPs. Let us denote the MA protocol with\ncomputation replication as MA-CR. The average look-\nahead values of MA and MA-CR methods, in terms of\nnumber of update interval, are shown in Fig. 9a. The\ntotal number of synchronization messages sent during the\nsimulation is shown in Fig. 9b. For comparison, the results\nof using global barrier synchronization, denoted as barrier,\nare also shown in the \ufb01gures. Note that the average\nobtainable optimum number of extended layers to repli-\ncate (i.e.,", 26.19115, 124.9486528, 277.3475614400001, 331.41377839999996], ["text", "^k) is equal to lookahead minus 1.", 66.04658, 124.9486528, 205.78194008, 139.46356], ["text", "It can be observed from Fig. 9a that the lookahead values\nof the MA-CR method are larger than those of the MA", 26.1921, 102.4418328, 277.28036837999997, 123.1314428], ["text", "TABLE 2\nAverage Number of Available Extended Layers", 59.810619679999945, 69.01618030000023, 243.7031562699999, 87.96018030000022], ["text", "layer count", 26.192379679999945, 34.09603340000022, 70.63384562999995, 43.06233340000023], ["text", "8 LPs", 97.56860967999995, 48.55239340000023, 118.95144191999997, 57.518693400000224], ["text", "23.6", 100.40196162999995, 34.09603340000022, 116.09298662999994, 43.06233340000023], ["text", "16 LPs", 145.87096440999994, 48.55239340000023, 171.73246349999994, 57.518693400000224], ["text", "18.7", 150.97189362999995, 34.09603340000022, 166.66291862999995, 43.06233340000023], ["text", "32 LPs", 198.65198598999996, 48.55239340000023, 224.51348507999995, 57.518693400000224], ["text", "16.9", 203.69642752, 34.09603340000022, 219.38745251999998, 43.06233340000023], ["text", "48 LPs", 251.37651987999996, 48.55239340000023, 277.23801897, 57.518693400000224], ["text", "16.0", 253.47284197, 34.09603340000022, 269.16386697, 43.06233340000023], ["text", "Authorized licensed use limited to: Southeast University. Downloaded on December 21,2022 at 05:11:40 UTC from IEEE Xplore.  Restrictions apply.", 52.65, 7.291, 513.2920000000001, 14.291]], "9": [["text", "XU ET AL.: REDUCING SYNCHRONIZATION OVERHEAD WITH COMPUTATION REPLICATION IN PARALLEL AGENT-BASED ROAD...", 26.1921, 738.6552378, 455.6456778000003, 745.6290378], ["text", "3295", 524.8843537200004, 738.6552378, 540.2845962600005, 745.6290378], ["text", "TABLE 5\nRedundant Computation as a Percentage\nof the Total Simulation Execution Time", 70.29851, 696.6634803000001, 233.19197198999998, 725.5851802999999], ["text", "8 LPs", 89.68723, 676.1996934, 111.07006224000001, 685.1659934], ["text", "16 LPs", 139.46364445, 676.1996934, 165.32514354, 685.1659934], ["text", "32 LPs", 190.43078354, 676.1996934, 216.29228263, 685.1659934], ["text", "48 LPs", 242.19144018000003, 676.1996934, 268.05293927, 685.1659934], ["text", "Percentage", 26.19059, 661.7424334, 69.587482, 670.7087334], ["text", "0.77(cid:10) 0.03", 80.16054296000002, 661.7424334, 120.57165499999999, 671.0046213], ["text", "1.16 (cid:10) 0.04", 131.07208893, 661.7424334, 173.693395, 671.0046213], ["text", "1.50(cid:10)0.03", 184.19382893000002, 661.7424334, 222.505935, 671.0046213], ["text", "0.87(cid:10)0.03", 233.00636893, 661.7424334, 271.31846500000006, 671.0046213], ["text", "adaptive computation replication has improved the overall\nperformance of the simulation. The improvement is the result\nof increased lookahead and reduced number of synchroniza-\ntion messages, as shown in Fig. 9. This means that the bene\ufb01t\nof reduced synchronization messages exceeded redundant\ncomputation and the overhead of increased message sizes.", 26.1921, 576.9014628, 277.27184818, 643.6836828], ["text", "When the number of LPs increases from 16 to 32, the\nspeed-up using MA-CR increases further; whereas the speed-\nup using MA decreases. This is because the absolute number\nof messages for MA increases drastically as the number of\nLPs increases, although the percentages of increment on look-\nahead for MA and MA-CR are similar, as shown in Fig. 9.", 26.1921, 508.1884728, 277.3466185199999, 574.9139028000001], ["text", "4.2.3 Redundant Computation and Overhead of", 26.1921, 487.13459059999997, 243.28811285999993, 497.0971906], ["text", "Algorithms", 60.32098, 474.2091106, 107.31157542, 484.1717106], ["text", "The amount of redundant computation and the overhead of\nthe proposed method are investigated in this section. The\namount of redundant computation, calculated as a percentage\nof the total simulation execution time, is shown in Table 5.", 26.1921, 425.5318828, 277.3475649799999, 469.35298279999995], ["text", "For all cases in Table 3, redundant computation is less", 38.15441, 414.0797228, 277.28983297999997, 423.5443228], ["text", "than 1.5 percent of the total execution time.", 26.1921, 402.5707628, 205.66836333999993, 412.0353628], ["text", "The computational overhead of the method comes from\ncalculating extended layers (Algorithms 2) and calculating\noptimum lookahead. Due to dynamic partitioning of the\nroad network, Algorithm 2 was executed 47 (cid:10) 2, 40 (cid:10) 1,\n31 (cid:10) 1, and 28(cid:10)1 times for 8, 16, 32, and 48 LPs respectively.\nOptimum lookahead was calculated was executed 114 times\nfor all different numbers of LPs (every 10 minutes in\n19 hours simulation time). Both algorithms are executed by\nevery LP, hence, the maximum overhead amongst the LPs\nis collected. Total overheads of the algorithms throughout\nthe simulation are shown in Table 6.", 26.1921, 276.5401528, 277.28509862, 400.5832028], ["text", "Table 6 shows that the overheads introduced are at the\nmagnitude of seconds which are insigni\ufb01cant with respect\nto the overall simulation execution time.", 26.19399, 242.18365279999998, 277.2500766799999, 274.5525828], ["text", "Besides computational overheads, extra memory is also\nrequired for the computation replication method. It consists\nof mainly two parts: storing segments of extended layers,\nand storing external agents. The memory for storing seg-\nments depends on the total number of segments in the road\nnetwork. Storing external agents takes memory propor-\ntional to redundant computation. In our experiment, storing\nsegments is not signi\ufb01cant compared to the memory usage\nof the whole simulation. Memory for storing agents is\nincreased by 1.5 percent (same percentage as redundant\ncomputation shown in Table 5).", 26.19399, 116.1530428, 277.2841492399999, 240.1960828], ["text", "TABLE 6\nTotal Overhead of Calculating Extended Layers\nand Estimating the Optimum Lookahead (Unit=Second)", 42.97281, 78.4838703, 260.4378636799999, 107.3490803], ["text", "8 LPs", 117.46752, 58.020083400000004, 138.85035223999998, 66.9863834], ["text", "16 LPs", 155.84866377999998, 58.020083400000004, 181.71016286999998, 66.9863834], ["text", "32 LPs", 197.51774977, 58.020083400000004, 223.37924886, 66.9863834], ["text", "48 LPs", 244.45902016, 58.020083400000004, 270.32051925, 66.9863834], ["text", "calc extended layer\ncalc lookahead", 26.19148, 33.5860234, 102.19342531999999, 52.5300234], ["text", "6.1(cid:10)1.9\n2.6(cid:10)0.1", 113.49544646999999, 33.5860234, 142.848425, 52.8259113], ["text", "1.6(cid:10)0.5\n1.2(cid:10)0.1", 154.14775626, 33.5860234, 183.440655, 52.8259113], ["text", "0.6(cid:10)0.1\n0.8(cid:10) 0.1", 194.73998626, 33.5860234, 226.187495, 52.8259113], ["text", "0.2(cid:10)0.01\n1.0(cid:10)0.02", 237.48592889, 33.5860234, 271.31936500000006, 52.8259113], ["text", "TABLE 7\nComparison of Average Lookahead, Execution Time,\nand Overhead of Evaluating Optimum Lookahead\nUsing Different Evaluation Periods with 32 LPs", 310.84708, 686.6857803, 518.6249431599999, 725.5851802999999], ["text", "reevaluation\nperiod", 289.24727, 656.2443033999999, 338.9833361, 675.1882934], ["text", "lookahead\n(update intervals)", 347.64119, 656.2443033999999, 418.31177334, 675.1882934], ["text", "execution time\n(second)", 427.01178, 656.2443033999999, 485.15913213, 675.1882934], ["text", "overhead\n(second)", 498.4445, 656.2443033999999, 535.6815439, 675.1882934], ["text", "1 min\n5 min\n10 min", 289.24727, 621.8890233999999, 316.13092729000005, 650.7542334], ["text", "4.50(cid:10)0.15\n4.47(cid:10)0.14\n4.56(cid:10)0.05", 363.85495567000004, 621.8890233999999, 402.167055, 651.0501213], ["text", "1275.6(cid:10)36.8\n1261.5(cid:10)22.7\n1253.8(cid:10)36.6", 432.50991082999997, 621.8890233999999, 479.722865, 651.0501213], ["text", "20.9(cid:10) 1.34\n2.98(cid:10) 0.29\n0.83(cid:10) 0.06", 493.85196054, 621.8890233999999, 534.318665, 651.0501213], ["text", "4.2.4 Frequency of Evaluation\nExperiments have also been conducted to analyze the effect\nof different evaluation periods on the average lookahead,\nthe overall simulation execution time, and the overhead of\nadapting the optimum lookahead. The results of using eval-\nuation periods of 1, 5, and 10 minutes with 32 LPs are\nshown in Table 7. There is no signi\ufb01cant difference in the\naverage lookahead using different evaluation periods. This\nis because the traf\ufb01c condition does not change so often.\nTherefore, frequent reevaluations of the optimum number\nof extended layers to replicate is not necessary. The over-\nhead of executing the algorithm increases when the fre-\nquency of reevaluation increases, which also results in\nslight increase of the total execution time.", 289.2472, 437.2654028, 540.2862503999999, 599.0309906], ["text", "The overhead of evaluating the optimal lookahead with-\nout adaptive range for 32 LPs is similar to that shown in\nTable 7. However, for 8 LPs, the overheads with and with-\nout adaptive range are 18.11(cid:10)0.92, and 43.6(cid:10)6.6 seconds,\nrespectively, when the evaluation period is 1 minute.\nThe bene\ufb01t of adaptive range is more obvious for more\nfrequent evaluations and fewer LPs (i.e., more available\nextended layers).", 289.2472, 345.6480728, 540.3411450799998, 435.2778328], ["text", "4.2.5 Weak Scaling Property\nIn addition to the strong scaling property, it is also interest-\ning to analyze the weak scaling property on the MA-CR\nmethod. So, we conducted another set of experiments using\nfour different problem sizes created using arti\ufb01cial road net-\nworks. They are 48(cid:9)16, 96(cid:9)16, 192(cid:9)16, and 384(cid:9)16 rectan-\ngular grid networks. Each road link in the road networks is\n200 meters long. Agent populations are 5k, 10k, 20k, and\n40k respectively. Simulations with the four different net-\nworks are run with 12, 24, 48, and 96 LPs, respectively. The\nroad networks are partitioned into stripes vertically. Thus,\nan LP has the same workload for all cases in terms of both\nthe size of the network partition and the number of agents.\nA larger cluster with four compute nodes was used in the\nexperiments, where each compute node has 24 CPU cores.\nEach case was run four times and the average speed-up was\ntaken. The result is shown in Fig. 11.", 289.24625, 130.10270279999997, 540.2994973, 326.2247906], ["text", "The results in Fig. 11 show that when the problem size is\nscaled up proportionally with increasing number of LPs,\nspeedup remains increasing for both MA-CR and MA\napproaches. As expected, the amount of increment becomes\nless when number of LPs increases. With more LPs, the\nproblem size also becomes larger. As a result, more commu-\nnications are required between different compute nodes. In\naddition, synchronization overhead also increases with\nthe number of LPs. As shown in the \ufb01gure above, MA-CR", 289.24625, 26.9764228, 540.3013902199999, 128.1151428], ["text", "Authorized licensed use limited to: Southeast University. Downloaded on December 21,2022 at 05:11:40 UTC from IEEE Xplore.  Restrictions apply.", 52.65, 7.291, 513.2920000000001, 14.291]], "10": [["text", "3296", 26.192100100000022, 738.6552378, 41.59234264000002, 745.6290378], ["text", "IEEE TRANSACTIONS ON PARALLEL AND DISTRIBUTED SYSTEMS, VOL. 28, NO. 11, NOVEMBER 2017", 188.22136930000005, 738.6552378, 540.277622560001, 745.6290378], ["text", "The idea of reducing communication at the expense of\nperforming some redundant computation has been pre-\nsented in many previous works. Ghost cell expansion is\nused in [8] for solving partial differential equation (PDE)\nproblems using \ufb01nite difference method. A similar concept\nhas also been applied in sparse matrix-vector multiplication\nproblems [9]. The computational tasks in those works are\norganized as regular 2D and 3D grids of cells or meshes.\nThey are static and their interactions are predictable. Thus,\nthe overhead of computation replication can be analyzed\nprior to the execution of the program. Dynamic adaptation\nof redundant computation is not required. Consequently,\nthe de\ufb01nition of extended layers based on grids or meshes\ncannot be used directly in agent-based traf\ufb01c simulations.", 289.24741, 565.4394728, 540.3006572999999, 723.8390228000001], ["text", "Computation replication has also been applied in agent-\nbased simulations [10], [11], [12]. However, the simulation\nspace for many of these agent-based applications is a 2D\ngrid. In some cases, agents are not even situated in a spatial\nenvironment. For instance, in a social network, agents are\nrepresented as vertices of a graph, and interactions of agents\nare represented as edges. Hence, the de\ufb01nitions of extended\nlayers in those works are not applicable for traf\ufb01c simula-\ntion either. The indexing of the positions of agents and their\ninteractions are different in a 2D grid or interaction graph\nfrom those in a spatial road network. In addition, the\ndynamics of the workload in the replicated region during\nsimulation run-time is not considered either in these works.\nOur work aims at accurately de\ufb01ning extended layers for\nagent-based traf\ufb01c simulation, as well as developing an\neffective approach to dynamically balance the trade-off\nbetween the overhead of redundant computation and the\nbene\ufb01t of reducing synchronization operations.", 289.24741, 362.76453280000004, 540.2864604, 563.6222728], ["text", "6 CONCLUSION AND FUTURE WORK", 289.2472, 340.8574664, 468.4224466, 352.3145664], ["text", "The purpose of this work is to reduce the total execution\ntime of parallel agent-based road traf\ufb01c simulation by\nreducing synchronization overhead. Making agent-based\nroad traf\ufb01c simulation fast is crucial for real-time decision\nsupport systems and studies that require a lot of simulation\nruns. Computation replication has been applied mainly in\napplications such as matrix multiplication and solving par-\ntial differential equations to reduce inter-process communi-\ncation. However, there is little work done for applying this\napproach to parallel agent-based road traf\ufb01c simulation.", 289.2472, 221.7196028, 540.2985543799999, 334.3104828], ["text", "In this article, we mainly focused on two problems for effec-\ntively applying the concept of computation replication to\nagent-based traf\ufb01c simulation: i) how to determine the redun-\ndant computation required to achieve a certain synchroniza-\ntion frequency, and ii) how to manage the trade-off between\nthe overhead caused by redundant computation and the bene-\n\ufb01t of reduced synchronization. The \ufb01rst problem was solved\nby analyzing the characteristics of agents and road networks\nto determine extended layers of partitions in a road network.\nSensing ranges and movement of agents were considered. The\nsecond problem was solved by developing an analytical model\nof the total overhead of redundant computation and synchro-\nnization, and using it to dynamically adjust the number of\nextended layers to replicate according to traf\ufb01c conditions. To\nreduce the overhead of determining the optimum number of\nextended layers to replicate when traf\ufb01c condition changes, an\nadaptive approach was used to limit the search range.", 289.2472, 26.9759928, 540.3969862199999, 219.7320328], ["text", "Fig. 11. Average speed-up of parallel simulation with MA and MA-CR\nusing different problem sizes and LPs.", 26.192100100000022, 585.1959161999999, 277.30122129999995, 602.1238261999999], ["text", "always outperforms MA and there is no signi\ufb01cant drop in\nperformance improvement (that is, the distance between\nthe two lines) when number of LPs increases.", 26.1921, 538.4643528, 277.2775269399999, 570.8332828], ["text", "5 RELATED WORK", 26.1921, 512.6936664, 123.3327466, 524.1507664000001], ["text", "The synchronization issue of parallel discrete-event simula-\ntions has been extensively studied in the literature [3], [6].\nNevertheless, improving the performance of synchroniza-\ntion protocols usually involves tuning the protocols for the\nmodels used in particular simulations. For parallel agent-\nbased traf\ufb01c simulations, there have been many approaches\nto conduct synchronization. Employing global barriers is\nthe most frequently used approach due to its simplicity. LPs\nare blocked from executing agent models at the end of\nupdate intervals, then they exchange messages with rele-\nvant LPs and proceed to the next update interval simulta-\nneously [4],\n[5]. For parallel simulation using multi-\nthreading, all threads access the shared memory directly at\nbarriers instead of communicating with each other by mes-\nsage passing [13]. This simplicity frequently comes at the\ncost of LPs waiting at global barriers. It does not fully\nexploit the parallelism of the simulation. The work in [7]\nused a conservative time window synchronization from\n[21]. The synchronization protocol allows LPs to progress\nasynchronously. LPs analyze their event lists and determine\nthe lower bounds of simulation time for neighboring LPs,\nuntil which they do not affect the neighboring LPs. LPs col-\nlect the time bounds from all neighboring LPs and take the\nminimum values as their time windows. They execute local\nevents within the time windows, and then synchronize\nagain. This is inef\ufb01cient since LPs still need to communicate\nwith all neighbors during synchronization. Communicating\nto all neighbors is unnecessary. The methods above are con-\nservative approaches, in which no violations of data depen-\ndencies are allowed at any time of the simulation.", 26.1921, 164.45560279999998, 277.2841521599999, 506.2033828], ["text", "Another attempt is to use an optimistic approach [22],\n[23]. LPs are allowed to progress over the synchronization\npoint and violations of data dependencies are examined. If\nthere is a violation, the simulation is rolled-back to the point\nbefore the violation happens. However, the disadvantage of\nthis approach is the overhead of state saving and perform-\ning roll-back operations. Some optimistic simulation frame-\nworks use reverse computation to avoid state saving\noverhead [24]. Our work aims at improving the ef\ufb01ciency of\nconservative synchronization methods in agent-based traf-\n\ufb01c simulation. In particular, we try to reduce synchroniza-\ntion operations by redundant computation.", 26.1921, 26.9728228, 277.2784733999999, 162.4680428], ["text", "Authorized licensed use limited to: Southeast University. Downloaded on December 21,2022 at 05:11:40 UTC from IEEE Xplore.  Restrictions apply.", 52.65, 7.291, 513.2920000000001, 14.291]], "11": [["text", "XU ET AL.: REDUCING SYNCHRONIZATION OVERHEAD WITH COMPUTATION REPLICATION IN PARALLEL AGENT-BASED ROAD...", 26.1921, 738.6552378, 455.6456778000003, 745.6290378], ["text", "3297", 524.8843537200004, 738.6552378, 540.2845962600005, 745.6290378], ["text", "The ef\ufb01ciency of the adaptive computation replication\nmethod has been investigated in a parallel agent-based traf\ufb01c\nsimulator using real world data. Experiments have shown\nthat the method is able to reduce synchronization messages\nsigni\ufb01cantly by increasing lookahead of LPs. The overall exe-\ncution time of the parallel simulation has been signi\ufb01cantly\nreduced, though there is redundant computation.", 26.19199, 646.8623228, 277.36733063999986, 723.8473828], ["text", "As of future work, there are two interesting directions.\nFirst, similar to the extended layers, inner areas of a parti-\ntion can also be divided into layers. This can be used for\noverlapping communication and computation to further\nreduce synchronization overhead. Second, partitioning of\nthe road network affects locations and shapes of extended\nlayers, thus the performance may be further improved if the\npartitioning of the road network considers the optimization\nof computation replication.", 26.19199, 545.5532528, 277.27457756, 645.0451228000001], ["text", "ACKNOWLEDGMENTS", 26.1921, 524.2023664, 127.58436414999998, 535.6594664], ["text", "This work was \ufb01nancially supported by the Singapore\nNational Research Foundation under\nfor\nResearch Excellence And Technological Enterprise (CREATE)\nprogramme.", 26.1921, 473.8340928, 277.2832056999999, 517.7119828], ["text", "its Campus", 204.54680824000002, 496.7384328, 257.33372182000005, 506.20303279999996], ["text", "REFERENCES", 26.1921, 452.48576640000005, 90.3678514, 463.9428664], ["text", "[1] A. Kesting, M. Treiber, and D. Helbing, \u201cAgents for traf\ufb01c simu-\nlation,\u201d Multi-Agent Syst. Simul. Appl., A. M. Uhrmacher and\nD. Weyns, Eds. Boca Raton, FL, USA: CRC Press, ch. 11, pp. 325\u2013\n356, 2009.", 26.1921, 411.8933836, 277.28767227999987, 446.7367036], ["text", "[2] H. Mizuta, Y. Yamagata, and H. Seya, \u201cLarge-scale traf\ufb01c simual-\ntion for low-carbon city,\u201d in Proc. Winter Simul. Conf., Dec. 09\u201312,\n2012, pp. 1\u201312.", 26.1921, 384.96366359999996, 277.31955392, 410.9058736], ["text", "[3] R. M. Fujimoto, Parallel and Distribution Simulation Systems.", 26.1921, 376.0059636, 277.29404999999997, 384.031955], ["text", "New York, NY, USA: Wiley Interscience, 2000.", 45.18429, 367.04825359999995, 207.90548723999996, 375.0184536], ["text", "[4] K. Nagel and M. Rickert, \u201cParallel implementation of the TRAN-\nSIMS,\u201d Parallel Comput., vol. 27, no. 12, pp. 1611\u20131639, 2001.\n[5] T. Suzumura and H. Kanezashi, \u201cHighly scalable X10-based agent\nsimulation platform and its application to large-scale traf\ufb01c simu-\nlation,\u201d in Proc. IEEE/ACM Int. Symp. Distrib. Simul. Real Time\nAppl., Oct. 25\u201327, 2012, pp. 243\u2013250.", 26.1921, 313.2454136, 277.3163645799999, 366.0607436], ["text", "[6] D. M. Nicol, \u201cPrinciples of conservative parallel simulation,\u201d in", 26.1913, 304.28771359999996, 277.26933742, 312.2579136], ["text", "Proc. Winter Simul. Conf., Dec. 08\u201311, 1996, pp. 128\u2013135.", 45.18349, 295.3300036, 237.721206, 303.355995], ["text", "[7] M. Namekawa, A. Satoh, H. Mori, K. Yikai, and T. Nakanishi,\n\u201cClock synchronization algorithm for parallel road-traf\ufb01c simula-\ntion system in a wide area,\u201d Math. Comput. Simul., vol. 48, no. 4\u20136,\npp. 351\u2013359, 1999.", 26.1913, 260.63333359999996, 277.34744537999995, 294.3424936], ["text", "[8] C. Ding and Y. He, \u201cA ghost cell expansion method for reducing\ncommunications in solving PDE problems,\u201d in Proc. ACM/IEEE\nConf. Supercomputing, Nov. 10\u201316, 2001, pp. 1\u201312.\nJ. Demmel,\n\u201cAvoiding communication in sparse matrix\ncomputations,\u201d in Proc. IEEE Int. Symp. Parallel Distrib. Process.,\nApr. 14\u201318, 2008, pp. 1\u201312.", 26.1913, 206.9444736, 277.30759437999995, 259.7597936], ["text", "[9]", 26.1913, 224.85988360000002, 35.4845532, 232.83008360000002], ["text", "[10] B. G. Aaby, K. S. Perumalla, and S. K. Seal, \u201cEf\ufb01cient simulation of\nagent-based models on multi-GPU and multi-core clusters,\u201d in Proc.\n3rd Int. ICST Conf. Simul. Tools Techn., Mar. 15\u201319, 2010, pp. 1\u201310.\n[11] T. Zou, G. Wang, and M. Salles, \u201cMaking time-stepped applica-\ntions tick in the cloud,\u201d in Proc. 2nd ACM Symp. Cloud Comput.,\nOct. 26\u201328, 2011, pp. 1\u201314.", 26.1913, 153.1416336, 277.33070795999987, 205.95696360000002], ["text", "[12] R. Zunino, \u201cTrading computation time for synchronization time in\nspatial distributed simulation,\u201d in Proc. IEEE Workshop Principles\nAdv. Distrib. Simul., Jun. 14\u201317, 2011, pp. 1\u20138.\nJ. Barcel(cid:2)o, J. L. Ferrer, and D. Garcia, \u201cMicroscopic traf\ufb01c simula-\ntion for ATT systems analysis. A parallel computing version,\u201d in\nProc. Contribution 25th Aniversary CRT, 1998, pp. 1\u201316.", 26.1913, 99.33880359999999, 277.29484319999995, 152.15412360000002], ["text", "[13]", 26.1913, 117.2542136, 39.4696532, 125.2244136], ["text", "[14] Y. Xu, W. Cai, H. Aydt, M. Lees, and D. Zehe, \u201cAn asynchronous\nsynchronization strategy for parallel large-scale agent-based traf-\n\ufb01c simulations,\u201d in Proc. 3rd ACM SIGSIM Conf. Principles Adv.\nDiscrete Simul., Jun. 10\u201312, 2015, pp. 259\u2013269.", 26.1913, 63.507963600000004, 277.3490394199999, 98.3512936], ["text", "[15] Y. Xu, W. Cai, H. Aydt, and M. Lees, \u201cEf\ufb01cient graph-based\ndynamic load-balancing for parallel\nlarge-scale agent-based\ntraf\ufb01c simulation,\u201d in Proc. Winter Simul. Conf., Dec. 7\u201310, 2014,\npp. 3483\u20133494.", 26.1913, 27.6205436, 277.32752029999983, 62.4638736], ["text", "[16] K. Al-Tawil and C. A. Moritz, \u201cPerformance Modeling and Evalu-\nation of MPI,\u201d J. Parallel Distrib. Comput., vol. 61, no. 2, pp. 202\u2013\n223, 2001.", 289.24696, 699.3769036, 540.34492292, 725.2625135999999], ["text", "[17] T. Hoe\ufb02er, W. Gropp, R. Thakur, and J. L. Tr\u20acaff, \u201cToward perfor-\nmance models of MPI implementations for understanding appli-\ncation scaling issues,\u201d in Proc. 17th Eur. MPI Users\u2019 Group Meeting\nConf. Recent Advances Message Passing Interface, Sep. 12\u201315, 2010,\npp. 21\u201330.", 289.24696, 654.5317736, 540.35767394, 700.9207299999999], ["text", "[18] Y. Xu, H. Aydt, and M. Lees, \u201cSEMSim: A distributed architecture\nfor multi-scale traf\ufb01c simulation,\u201d in Proc. 26th ACM/IEEE/SCS\nWorkshop Principles Adv. Distrib. Simul., Jul. 15\u201319, 2012, pp. 178\u2013\n180.", 289.24696, 618.6443535999999, 540.3345616599998, 653.5442635999999], ["text", "[19] M. Treiber, A. Hennecke, and D. Helbing, \u201cCongested traf\ufb01c\nstates in empirical observations and microscopic simulations,\u201d\nPhys. Rev. E, vol. 62, no. 2, 2000, Art. no. 1805.", 289.24696, 591.7712336, 540.3409382399999, 617.6568436], ["text", "[20] G. Karypis and V. Kumar, \u201cA fast and high quality multilevel\nscheme for partitioning irregular graphs,\u201d SIAM J. Sci. Comput.,\nvol. 20, no. 1, pp. 359\u2013392, 1999.", 289.24696, 564.8981036, 540.3305765599999, 590.7837235999999], ["text", "[21] R. Ayani and H. Rajaei, \u201cParallel simulation using conservative\ntime windows,\u201d in Proc. 24th Winter Simul. Conf., Dec. 13\u201316, 1992,\npp. 709\u2013717.", 289.24696, 537.9787936, 540.30043748, 563.8540135999999], ["text", "[22] S. B. Yoginath and K. S. Perumalla, \u201cParallel vehicular traf\ufb01c sim-\nulation using reverse computation-based optimistic execution,\u201d in\nProc. 22nd Workshop Principles Adv. Distrib. Simul., Jun. 3\u20136, 2008,\npp. 33\u201342.", 289.24711, 502.0913736, 540.3012405600001, 536.9912836], ["text", "[23] M. Hanai, T. Suzumura, G. Theodoropoulos, and K. S. Perumalla,\nlarge-scale traf\ufb01c simulation,\u201d in Proc. 3rd\n\u201cExact-differential\nACM SIGSIM Conf. Principles Adv. Discrete Simul., 2015, pp. 271\u2013\n280.", 289.24711, 466.2605436, 540.37057756, 501.1038636], ["text", "[24] C. D. Carothers, K. S. Perumalla, and R. M. Fujimoto, \u201cEf\ufb01cient\noptimistic parallel simulations using reverse computation,\u201d ACM\nTrans. Model. Comput. Simul., vol. 9, no. 3, pp. 224\u2013253, 1999.", 289.24711, 439.3308336, 540.3243461999999, 465.2730336], ["text", "Yadong Xu is a currently research associate of\nTUMCREATE Ltd. He is currently working toward\nthe PhD degree in the School of Computer Science\nand Engineering, Nanyang Technological Univer-\nsity (NTU), Singapore. His thesis topic is on the\nload-balancing and synchronization of parallel\nagent-based road traf\ufb01c simulation. His research\ninterests are primarily parallel and distributed sys-\ntems, agent-based simulation, ontologies for\nmodelling and simulation, and intelligent transpor-\ntation system. He is a member of the IEEE.", 368.6172, 331.2664562, 540.3654457600001, 428.8942368], ["text", "Vaisagh Viswanathan received the PhD degree\nin modelling behavior in agent-based simulations\nof crowd egress from NTU, Singapore, in 2015.\nHe was a post-doctoral research fellow at TUM-\nCREATE Ltd. working on Modelling and Optimi-\nzation of Architectures and Infrastructure. His\nresearch investigates the infrastructure require-\nments and the environmental\nlarge\nscale electro-mobility from a complex systems\nperspective. His research interests include pri-\nmarily agent based modeling and simulation,\ncomplex adaptive systems. He is a member of\nthe IEEE.", 368.6172, 204.72755619999998, 540.3638517200001, 320.3273368], ["text", "impact of", 483.18962202, 249.5726862, 517.94766422, 257.5428862], ["text", "Wentong Cai is a professor in the School of Com-\nputer Science and Engineering, NTU, Singapore.\nHis expertise is mainly in the areas of modeling and\nsimulation and parallel and distributed computing.\nHe is an associate editor of the ACM Transactions\non Modeling and Computer Simulation and an edi-\ntor of the Future Generation Computer Systems.\nHe has chaired a number of international conferen-\nces. Most recent ones include SIGSIM PADS\n2017, SIMUTools 2016, DS-RT 2015, and Cloud-\nCom 2014. He is a member of the IEEE.", 368.6172, 90.1516762, 540.36783906, 187.83603680000002], ["text", "\" For more information on this or any other computing topic,\nplease visit our Digital Library at www.computer.org/publications/dlib.", 289.24676, 62.2583662, 540.33755498, 81.72558000000001], ["text", "Authorized licensed use limited to: Southeast University. Downloaded on December 21,2022 at 05:11:40 UTC from IEEE Xplore.  Restrictions apply.", 52.65, 7.291, 513.2920000000001, 14.291]]}